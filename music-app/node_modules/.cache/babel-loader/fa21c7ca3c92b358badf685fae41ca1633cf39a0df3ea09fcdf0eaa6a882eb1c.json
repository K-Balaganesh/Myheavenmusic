{"ast":null,"code":"var _jsxFileName = \"D:\\\\5th sem\\\\React projects\\\\Reactcodegpt\\\\music-app\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { useMusicPlayer } from '../context/MusicPlayerContext';\nimport \"./Home.css\"; // Styles for rows and headers\nimport \"../components/Search.css\"; // Reusing Song Card styles\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MAX_SONGS_PER_ROW = 5;\n\n// --- SongRow Component for horizontal scrolling ---\nconst SongRow = /*#__PURE__*/React.memo(_c = ({\n  title,\n  songs,\n  activeSong,\n  isPlaying,\n  playSong\n}) => {\n  if (!songs || songs.length === 0) return null;\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"song-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"section-title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-row-container\",\n      children: songs.slice(0, MAX_SONGS_PER_ROW).map(song => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `song-card ${(activeSong === null || activeSong === void 0 ? void 0 : activeSong.id) === song.id && isPlaying ? 'is-playing' : ''}`,\n        onClick: () => playSong(song),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: song.cover,\n          alt: song.songname,\n          className: \"cover\"\n          // Fallback image using placeholder service (e.g., if cover is missing)\n          ,\n          onError: e => {\n            e.target.onerror = null;\n            e.target.src = \"https://placehold.co/200x200/404040/ffffff?text=No+Cover\";\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: song.songname\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: song.artist.split(',')[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this), song.movieName && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"song-detail\",\n          children: [\"Movie: \", song.movieName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 44\n        }, this)]\n      }, song.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n});\n_c2 = SongRow;\nexport default function Home() {\n  _s();\n  const [allSongs, setAllSongs] = useState([]);\n  const {\n    activeSong,\n    isPlaying,\n    playSong\n  } = useMusicPlayer();\n\n  // 1. Fetch All Songs\n  useEffect(() => {\n    fetch(\"/songs.json\").then(res => res.json()).then(data => {\n      setAllSongs(data);\n    }).catch(err => console.error(\"Error fetching songs:\", err));\n  }, []);\n\n  // 2. Mock Recently Played (Since we don't track history yet, we'll mock it)\n  const recentlyPlayed = useMemo(() => {\n    // Mock: Simply take the songs from index 5 to 10 and reverse them to appear \"recent\"\n    // In a real app, this would be retrieved from localStorage or Firebase history.\n    return allSongs.slice(5, 10).reverse();\n  }, [allSongs]);\n\n  // 3. Trending Songs (Mock: Simply take the top 5 songs)\n  const trendingSongs = useMemo(() => {\n    return allSongs.slice(0, MAX_SONGS_PER_ROW);\n  }, [allSongs]);\n\n  // 4. Tamil Songs (Filter by language)\n  const tamilSongs = useMemo(() => {\n    return allSongs.filter(song => song.language && song.language.toLowerCase().includes('tamil')).slice(0, MAX_SONGS_PER_ROW);\n  }, [allSongs]);\n\n  // 5. English Songs (Filter by language)\n  const englishSongs = useMemo(() => {\n    return allSongs.filter(song => song.language && song.language.toLowerCase().includes('english')).slice(0, MAX_SONGS_PER_ROW);\n  }, [allSongs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"main-welcome\",\n      children: \"\\uD83C\\uDFB5 Welcome to My Music Hub\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), allSongs.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading-message\",\n      children: \"Loading your music library...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(SongRow, {\n        title: \"Your Recently Played\",\n        songs: recentlyPlayed,\n        activeSong: activeSong,\n        isPlaying: isPlaying,\n        playSong: playSong\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(SongRow, {\n        title: \"Global Trending Hits\",\n        songs: trendingSongs,\n        activeSong: activeSong,\n        isPlaying: isPlaying,\n        playSong: playSong\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(SongRow, {\n        title: \"Top Tamil Melodies\",\n        songs: tamilSongs,\n        activeSong: activeSong,\n        isPlaying: isPlaying,\n        playSong: playSong\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(SongRow, {\n        title: \"International English Favorites\",\n        songs: englishSongs,\n        activeSong: activeSong,\n        isPlaying: isPlaying,\n        playSong: playSong\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n_s(Home, \"ZX/QF7XcNHHZAzE3XpuRx9GAk7o=\", false, function () {\n  return [useMusicPlayer];\n});\n_c3 = Home;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"SongRow$React.memo\");\n$RefreshReg$(_c2, \"SongRow\");\n$RefreshReg$(_c3, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useMusicPlayer","jsxDEV","_jsxDEV","Fragment","_Fragment","MAX_SONGS_PER_ROW","SongRow","memo","_c","title","songs","activeSong","isPlaying","playSong","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","slice","map","song","id","onClick","src","cover","alt","songname","onError","e","target","onerror","artist","split","movieName","_c2","Home","_s","allSongs","setAllSongs","fetch","then","res","json","data","catch","err","console","error","recentlyPlayed","reverse","trendingSongs","tamilSongs","filter","language","toLowerCase","includes","englishSongs","_c3","$RefreshReg$"],"sources":["D:/5th sem/React projects/Reactcodegpt/music-app/src/pages/Home.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useMusicPlayer } from '../context/MusicPlayerContext';\r\nimport \"./Home.css\"; // Styles for rows and headers\r\nimport \"../components/Search.css\"; // Reusing Song Card styles\r\n\r\nconst MAX_SONGS_PER_ROW = 5;\r\n\r\n// --- SongRow Component for horizontal scrolling ---\r\nconst SongRow = React.memo(({ title, songs, activeSong, isPlaying, playSong }) => {\r\n    if (!songs || songs.length === 0) return null;\r\n\r\n    return (\r\n        <section className=\"song-section\">\r\n            <h2 className=\"section-title\">{title}</h2>\r\n            <div className=\"song-row-container\">\r\n                {songs.slice(0, MAX_SONGS_PER_ROW).map((song) => (\r\n                    <div \r\n                        key={song.id} \r\n                        className={`song-card ${activeSong?.id === song.id && isPlaying ? 'is-playing' : ''}`}\r\n                        onClick={() => playSong(song)}\r\n                    >\r\n                        <img \r\n                            src={song.cover} \r\n                            alt={song.songname} \r\n                            className=\"cover\" \r\n                            // Fallback image using placeholder service (e.g., if cover is missing)\r\n                            onError={(e) => { e.target.onerror = null; e.target.src=\"https://placehold.co/200x200/404040/ffffff?text=No+Cover\"; }}\r\n                        />\r\n                        <h4>{song.songname}</h4>\r\n                        <p>{song.artist.split(',')[0]}</p>\r\n                        {song.movieName && <p className=\"song-detail\">Movie: {song.movieName}</p>}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </section>\r\n    );\r\n});\r\n\r\n\r\nexport default function Home() {\r\n    const [allSongs, setAllSongs] = useState([]);\r\n    const { activeSong, isPlaying, playSong } = useMusicPlayer();\r\n\r\n    // 1. Fetch All Songs\r\n    useEffect(() => {\r\n        fetch(\"/songs.json\")\r\n          .then((res) => res.json())\r\n          .then((data) => {\r\n            setAllSongs(data);\r\n          })\r\n          .catch((err) => console.error(\"Error fetching songs:\", err));\r\n    }, []);\r\n\r\n\r\n    // 2. Mock Recently Played (Since we don't track history yet, we'll mock it)\r\n    const recentlyPlayed = useMemo(() => {\r\n        // Mock: Simply take the songs from index 5 to 10 and reverse them to appear \"recent\"\r\n        // In a real app, this would be retrieved from localStorage or Firebase history.\r\n        return allSongs.slice(5, 10).reverse();\r\n    }, [allSongs]);\r\n\r\n    // 3. Trending Songs (Mock: Simply take the top 5 songs)\r\n    const trendingSongs = useMemo(() => {\r\n        return allSongs.slice(0, MAX_SONGS_PER_ROW);\r\n    }, [allSongs]);\r\n\r\n    // 4. Tamil Songs (Filter by language)\r\n    const tamilSongs = useMemo(() => {\r\n        return allSongs.filter(song => \r\n            song.language && song.language.toLowerCase().includes('tamil')\r\n        ).slice(0, MAX_SONGS_PER_ROW);\r\n    }, [allSongs]);\r\n\r\n    // 5. English Songs (Filter by language)\r\n    const englishSongs = useMemo(() => {\r\n        return allSongs.filter(song => \r\n            song.language && song.language.toLowerCase().includes('english')\r\n        ).slice(0, MAX_SONGS_PER_ROW);\r\n    }, [allSongs]);\r\n\r\n\r\n    return (\r\n        <div className=\"home-dashboard\">\r\n            <h1 className=\"main-welcome\">🎵 Welcome to My Music Hub</h1>\r\n            \r\n            {/* Display loading message or dashboard content */}\r\n            {allSongs.length === 0 ? (\r\n                <p className=\"loading-message\">Loading your music library...</p>\r\n            ) : (\r\n                <>\r\n                    {/* Row 1: Recently Played */}\r\n                    <SongRow\r\n                        title=\"Your Recently Played\"\r\n                        songs={recentlyPlayed}\r\n                        activeSong={activeSong}\r\n                        isPlaying={isPlaying}\r\n                        playSong={playSong}\r\n                    />\r\n\r\n                    {/* Row 2: Global Trending Hits */}\r\n                    <SongRow\r\n                        title=\"Global Trending Hits\"\r\n                        songs={trendingSongs}\r\n                        activeSong={activeSong}\r\n                        isPlaying={isPlaying}\r\n                        playSong={playSong}\r\n                    />\r\n                    \r\n                    {/* Row 3: Top Tamil Melodies */}\r\n                    <SongRow\r\n                        title=\"Top Tamil Melodies\"\r\n                        songs={tamilSongs}\r\n                        activeSong={activeSong}\r\n                        isPlaying={isPlaying}\r\n                        playSong={playSong}\r\n                    />\r\n\r\n                    {/* Row 4: International English Favorites */}\r\n                    <SongRow\r\n                        title=\"International English Favorites\"\r\n                        songs={englishSongs}\r\n                        activeSong={activeSong}\r\n                        isPlaying={isPlaying}\r\n                        playSong={playSong}\r\n                    />\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC3D,SAASC,cAAc,QAAQ,+BAA+B;AAC9D,OAAO,YAAY,CAAC,CAAC;AACrB,OAAO,0BAA0B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnC,MAAMC,iBAAiB,GAAG,CAAC;;AAE3B;AACA,MAAMC,OAAO,gBAAGV,KAAK,CAACW,IAAI,CAAAC,EAAA,GAACA,CAAC;EAAEC,KAAK;EAAEC,KAAK;EAAEC,UAAU;EAAEC,SAAS;EAAEC;AAAS,CAAC,KAAK;EAC9E,IAAI,CAACH,KAAK,IAAIA,KAAK,CAACI,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;EAE7C,oBACIZ,OAAA;IAASa,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC7Bd,OAAA;MAAIa,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAEP;IAAK;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC1ClB,OAAA;MAAKa,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAC9BN,KAAK,CAACW,KAAK,CAAC,CAAC,EAAEhB,iBAAiB,CAAC,CAACiB,GAAG,CAAEC,IAAI,iBACxCrB,OAAA;QAEIa,SAAS,EAAE,aAAa,CAAAJ,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEa,EAAE,MAAKD,IAAI,CAACC,EAAE,IAAIZ,SAAS,GAAG,YAAY,GAAG,EAAE,EAAG;QACtFa,OAAO,EAAEA,CAAA,KAAMZ,QAAQ,CAACU,IAAI,CAAE;QAAAP,QAAA,gBAE9Bd,OAAA;UACIwB,GAAG,EAAEH,IAAI,CAACI,KAAM;UAChBC,GAAG,EAAEL,IAAI,CAACM,QAAS;UACnBd,SAAS,EAAC;UACV;UAAA;UACAe,OAAO,EAAGC,CAAC,IAAK;YAAEA,CAAC,CAACC,MAAM,CAACC,OAAO,GAAG,IAAI;YAAEF,CAAC,CAACC,MAAM,CAACN,GAAG,GAAC,0DAA0D;UAAE;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzH,CAAC,eACFlB,OAAA;UAAAc,QAAA,EAAKO,IAAI,CAACM;QAAQ;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACxBlB,OAAA;UAAAc,QAAA,EAAIO,IAAI,CAACW,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAAC;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACjCG,IAAI,CAACa,SAAS,iBAAIlC,OAAA;UAAGa,SAAS,EAAC,aAAa;UAAAC,QAAA,GAAC,SAAO,EAACO,IAAI,CAACa,SAAS;QAAA;UAAAnB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAbpEG,IAAI,CAACC,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAcX,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAElB,CAAC,CAAC;AAACiB,GAAA,GA5BG/B,OAAO;AA+Bb,eAAe,SAASgC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG5C,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM;IAAEc,UAAU;IAAEC,SAAS;IAAEC;EAAS,CAAC,GAAGb,cAAc,CAAC,CAAC;;EAE5D;EACAF,SAAS,CAAC,MAAM;IACZ4C,KAAK,CAAC,aAAa,CAAC,CACjBC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACdL,WAAW,CAACK,IAAI,CAAC;IACnB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC,CAAC;EAClE,CAAC,EAAE,EAAE,CAAC;;EAGN;EACA,MAAMG,cAAc,GAAGpD,OAAO,CAAC,MAAM;IACjC;IACA;IACA,OAAOyC,QAAQ,CAACnB,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC+B,OAAO,CAAC,CAAC;EAC1C,CAAC,EAAE,CAACZ,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMa,aAAa,GAAGtD,OAAO,CAAC,MAAM;IAChC,OAAOyC,QAAQ,CAACnB,KAAK,CAAC,CAAC,EAAEhB,iBAAiB,CAAC;EAC/C,CAAC,EAAE,CAACmC,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMc,UAAU,GAAGvD,OAAO,CAAC,MAAM;IAC7B,OAAOyC,QAAQ,CAACe,MAAM,CAAChC,IAAI,IACvBA,IAAI,CAACiC,QAAQ,IAAIjC,IAAI,CAACiC,QAAQ,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CACjE,CAAC,CAACrC,KAAK,CAAC,CAAC,EAAEhB,iBAAiB,CAAC;EACjC,CAAC,EAAE,CAACmC,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMmB,YAAY,GAAG5D,OAAO,CAAC,MAAM;IAC/B,OAAOyC,QAAQ,CAACe,MAAM,CAAChC,IAAI,IACvBA,IAAI,CAACiC,QAAQ,IAAIjC,IAAI,CAACiC,QAAQ,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,SAAS,CACnE,CAAC,CAACrC,KAAK,CAAC,CAAC,EAAEhB,iBAAiB,CAAC;EACjC,CAAC,EAAE,CAACmC,QAAQ,CAAC,CAAC;EAGd,oBACItC,OAAA;IAAKa,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC3Bd,OAAA;MAAIa,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAC;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAG3DoB,QAAQ,CAAC1B,MAAM,KAAK,CAAC,gBAClBZ,OAAA;MAAGa,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAC;IAA6B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAEhElB,OAAA,CAAAE,SAAA;MAAAY,QAAA,gBAEId,OAAA,CAACI,OAAO;QACJG,KAAK,EAAC,sBAAsB;QAC5BC,KAAK,EAAEyC,cAAe;QACtBxC,UAAU,EAAEA,UAAW;QACvBC,SAAS,EAAEA,SAAU;QACrBC,QAAQ,EAAEA;MAAS;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB,CAAC,eAGFlB,OAAA,CAACI,OAAO;QACJG,KAAK,EAAC,sBAAsB;QAC5BC,KAAK,EAAE2C,aAAc;QACrB1C,UAAU,EAAEA,UAAW;QACvBC,SAAS,EAAEA,SAAU;QACrBC,QAAQ,EAAEA;MAAS;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB,CAAC,eAGFlB,OAAA,CAACI,OAAO;QACJG,KAAK,EAAC,oBAAoB;QAC1BC,KAAK,EAAE4C,UAAW;QAClB3C,UAAU,EAAEA,UAAW;QACvBC,SAAS,EAAEA,SAAU;QACrBC,QAAQ,EAAEA;MAAS;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB,CAAC,eAGFlB,OAAA,CAACI,OAAO;QACJG,KAAK,EAAC,iCAAiC;QACvCC,KAAK,EAAEiD,YAAa;QACpBhD,UAAU,EAAEA,UAAW;QACvBC,SAAS,EAAEA,SAAU;QACrBC,QAAQ,EAAEA;MAAS;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB,CAAC;IAAA,eACJ,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACmB,EAAA,CA1FuBD,IAAI;EAAA,QAEoBtC,cAAc;AAAA;AAAA4D,GAAA,GAFtCtB,IAAI;AAAA,IAAA9B,EAAA,EAAA6B,GAAA,EAAAuB,GAAA;AAAAC,YAAA,CAAArD,EAAA;AAAAqD,YAAA,CAAAxB,GAAA;AAAAwB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}