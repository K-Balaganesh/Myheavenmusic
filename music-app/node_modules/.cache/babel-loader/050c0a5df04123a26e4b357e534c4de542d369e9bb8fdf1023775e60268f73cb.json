{"ast":null,"code":"var _jsxFileName = \"D:\\\\5th sem\\\\React projects\\\\Reactcodegpt\\\\music-app\\\\src\\\\pages\\\\Categories.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n// Import the custom hook\nimport { useMusicPlayer } from './context/MusicPlayerProvider';\nimport \"./pages/Categories.css\";\nimport \"../components/Search.css\";\n\n// A default cover image for categories that might not have enough songs\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DEFAULT_COVER = \"https://placehold.co/100x100/303030/ffffff?text=Music\";\n\n// --- Configuration for all Category/Playlist Cards (Static) ---\nconst CATEGORIES_CONFIG = [\n// Languages (Not prominently displayed in the image but kept for completeness)\n{\n  id: \"tamil\",\n  title: \"🇮🇳 Top Tamil Songs\",\n  filter: song => {\n    var _song$language;\n    return (_song$language = song.language) === null || _song$language === void 0 ? void 0 : _song$language.toLowerCase().includes('tamil');\n  }\n}, {\n  id: \"english\",\n  title: \"🌍 International English Hits\",\n  filter: song => {\n    var _song$language2;\n    return (_song$language2 = song.language) === null || _song$language2 === void 0 ? void 0 : _song$language2.toLowerCase().includes('english');\n  }\n}, {\n  id: \"hindi\",\n  title: \"🎼 Bollywood Hindi Hits\",\n  filter: song => {\n    var _song$language3;\n    return (_song$language3 = song.language) === null || _song$language3 === void 0 ? void 0 : _song$language3.toLowerCase().includes('hindi');\n  }\n},\n// Moods/Genres (Updated for correct spelling/titles/filters from JSON)\n{\n  id: \"trending\",\n  title: \"🔥 Trending Now Package\",\n  filter: song => {\n    var _song$songvariety;\n    return (_song$songvariety = song.songvariety) === null || _song$songvariety === void 0 ? void 0 : _song$songvariety.includes('trending');\n  }\n}, {\n  id: \"mass\",\n  title: \"💥 Mass/Kuthu Hits\",\n  filter: song => {\n    var _song$songvariety2;\n    return (_song$songvariety2 = song.songvariety) === null || _song$songvariety2 === void 0 ? void 0 : _song$songvariety2.includes('mass');\n  }\n}, {\n  id: \"love\",\n  title: \"💖 Pure Love Songs\",\n  filter: song => {\n    var _song$songvariety3, _song$songvariety4;\n    return ((_song$songvariety3 = song.songvariety) === null || _song$songvariety3 === void 0 ? void 0 : _song$songvariety3.includes('romantic')) || ((_song$songvariety4 = song.songvariety) === null || _song$songvariety4 === void 0 ? void 0 : _song$songvariety4.includes('love'));\n  }\n}, {\n  id: \"sad\",\n  title: \"😢 Sad/Melody\",\n  filter: song => {\n    var _song$songvariety5, _song$songvariety6;\n    return ((_song$songvariety5 = song.songvariety) === null || _song$songvariety5 === void 0 ? void 0 : _song$songvariety5.includes('sad')) || ((_song$songvariety6 = song.songvariety) === null || _song$songvariety6 === void 0 ? void 0 : _song$songvariety6.includes('melancholy'));\n  }\n},\n// Used 'melancholy' as it appears in the JSON\n{\n  id: \"feel-good\",\n  title: \"😊 Feel Good Hits\",\n  filter: song => {\n    var _song$songvariety7;\n    return (_song$songvariety7 = song.songvariety) === null || _song$songvariety7 === void 0 ? void 0 : _song$songvariety7.includes('feel good');\n  }\n},\n// Correctly filtering by 'feel good' in songvariety\n{\n  id: \"vibe\",\n  title: \"🧘 Vibe/Chill Songs\",\n  filter: song => {\n    var _song$songvariety8;\n    return (_song$songvariety8 = song.songvariety) === null || _song$songvariety8 === void 0 ? void 0 : _song$songvariety8.includes('vibe');\n  }\n}, {\n  id: \"party\",\n  title: \"🥳 Party Starters\",\n  filter: song => {\n    var _song$songvariety9;\n    return (_song$songvariety9 = song.songvariety) === null || _song$songvariety9 === void 0 ? void 0 : _song$songvariety9.includes('party');\n  }\n}, {\n  id: \"dance\",\n  title: \"💃 Dance Floor Hits\",\n  filter: song => {\n    var _song$songvariety0;\n    return (_song$songvariety0 = song.songvariety) === null || _song$songvariety0 === void 0 ? void 0 : _song$songvariety0.includes('dance');\n  }\n},\n// Artist Playlists (Titles match the image, filters use exact JSON artist names)\n{\n  id: \"anirudh\",\n  title: \"🎤 Anirudh Ravichander Playlist\",\n  filter: song => {\n    var _song$artist;\n    return (_song$artist = song.artist) === null || _song$artist === void 0 ? void 0 : _song$artist.includes('Anirudh Ravichander');\n  }\n}, {\n  id: \"sidsriram\",\n  title: \"🎶 Sid Sriram Collection\",\n  filter: song => {\n    var _song$artist2;\n    return (_song$artist2 = song.artist) === null || _song$artist2 === void 0 ? void 0 : _song$artist2.includes('Sid Sriram');\n  }\n},\n// K. S. Chithra is the correct name in the JSON, not just 'Chitra'\n{\n  id: \"chitra\",\n  title: \"🎤 Chitra's Best Melodies\",\n  filter: song => {\n    var _song$artist3, _song$artist4;\n    return ((_song$artist3 = song.artist) === null || _song$artist3 === void 0 ? void 0 : _song$artist3.includes('K. S. Chithra')) || ((_song$artist4 = song.artist) === null || _song$artist4 === void 0 ? void 0 : _song$artist4.includes('Chinmayi'));\n  }\n},\n// K. S. Chithra for better match, using Chinmayi for 'Chitra-like'\n// Hiphop Tamizha has a space in the JSON's artist field for Hiphop Tamizha songs\n{\n  id: \"hiphop-tamizha\",\n  title: \"🎧 Hiphop Tamizha Swag\",\n  filter: song => {\n    var _song$artist5;\n    return (_song$artist5 = song.artist) === null || _song$artist5 === void 0 ? void 0 : _song$artist5.includes('Hiphop Tamizha');\n  }\n}, {\n  id: \"shreya-ghoshal\",\n  title: \"🌟 Shreya Ghoshal Hits\",\n  filter: song => {\n    var _song$artist6;\n    return (_song$artist6 = song.artist) === null || _song$artist6 === void 0 ? void 0 : _song$artist6.includes('Shreya Ghoshal');\n  }\n}, {\n  id: \"gvprakash\",\n  title: \"🎹 G. V. Prakash Kumar Songs\",\n  filter: song => {\n    var _song$artist7;\n    return (_song$artist7 = song.artist) === null || _song$artist7 === void 0 ? void 0 : _song$artist7.includes('G.V. Prakash Kumar');\n  }\n},\n// Yuvan Shankar Raja is the correct full name in the JSON\n{\n  id: \"yuvan-raja\",\n  title: \"👑 Yuvan Shankar Raja Classics\",\n  filter: song => {\n    var _song$artist8;\n    return (_song$artist8 = song.artist) === null || _song$artist8 === void 0 ? void 0 : _song$artist8.includes('Yuvan Shankar Raja');\n  }\n},\n// Genre Playlists (Titles match the image, filters use correct 'songvariety' values)\n{\n  id: \"peppy\",\n  title: \"⚡ Peppy & Energetic\",\n  filter: song => {\n    var _song$songvariety1;\n    return (_song$songvariety1 = song.songvariety) === null || _song$songvariety1 === void 0 ? void 0 : _song$songvariety1.includes('peppy');\n  }\n}, {\n  id: \"romantic-ballads\",\n  title: \"💖 Romantic Ballads\",\n  filter: song => {\n    var _song$songvariety10, _song$songvariety11;\n    return ((_song$songvariety10 = song.songvariety) === null || _song$songvariety10 === void 0 ? void 0 : _song$songvariety10.includes('romantic')) || ((_song$songvariety11 = song.songvariety) === null || _song$songvariety11 === void 0 ? void 0 : _song$songvariety11.includes('ballad'));\n  }\n}, {\n  id: \"instrumental\",\n  title: \"🎻 Classical Instrumental\",\n  filter: song => {\n    var _song$songvariety12;\n    return (_song$songvariety12 = song.songvariety) === null || _song$songvariety12 === void 0 ? void 0 : _song$songvariety12.includes('instrumental');\n  }\n}];\n\n// --- Category Card Component (UNCHANGED) ---\nconst CategoryCard = /*#__PURE__*/React.memo(_c = ({\n  category,\n  covers,\n  onSelect\n}) => {\n  // Use 'name' for dynamic playlists, 'title' for static categories\n  const cardTitle = category.title || category.name;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"category-card\",\n    onClick: () => onSelect(category),\n    \"aria-label\": `View songs in ${cardTitle}`,\n    children: [\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category-images\",\n      children: [\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", Array.from({\n        length: 4\n      }).map((_, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: covers[i] || DEFAULT_COVER,\n        alt: `${cardTitle} album cover ${i + 1}`,\n        onError: e => {\n          e.target.onerror = null;\n          e.target.src = DEFAULT_COVER;\n        }\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this)), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: cardTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n});\n_c2 = CategoryCard;\nexport default function Categories() {\n  _s();\n  const [allSongs, setAllSongs] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const navigate = useNavigate();\n\n  // ⭐️ Get dynamic playlists from the context\n  const {\n    playlists\n  } = useMusicPlayer();\n\n  // Fetch all songs once from /songs.json (Correct Implementation)\n  useEffect(() => {\n    // Using the provided JSON data instead of fetching:\n    const data = [{\n      \"id\": 1,\n      \"moviename\": \"Theeran\",\n      \"songname\": \"Laali Laali\",\n      \"artist\": \"Sathyaprakash D., Priya Hemesh\",\n      \"language\": \"Tamil\",\n      \"songvariety\": [\"romantic\", \"love\"],\n      \"characters\": \"Karthi, Rakul Preet Singh\",\n      \"url\": \"/music/Laali Laali.mp3\",\n      \"duration\": \"0:30\",\n      \"cover\": \"/covers/Laali Laali.jpg\"\n    }, {\n      \"id\": 2,\n      \"moviename\": \"Jigarthanda\",\n      \"songname\": \"Panda Naatu\",\n      \"artist\": \"Harris Jayaraj\",\n      \"language\": \"Tamil\",\n      \"songvariety\": [\"mass\", \"dance\"],\n      \"characters\": \"Siddharth\",\n      \"url\": \"/music/Panda Naatu.mp3\",\n      \"duration\": \"0:30\",\n      \"cover\": \"/covers/Panda Naatu.jpg\"\n    }, {\n      \"id\": 3,\n      \"moviename\": \"Maaran\",\n      \"songname\": \"Polladha Ulagam\",\n      \"artist\": \"G. V. Prakash Kumar\",\n      \"language\": \"Tamil\",\n      \"songvariety\": [\"peppy\", \"vibe\"],\n      \"characters\": \"Dhanush\",\n      \"url\": \"/music/Polladha Ulagam.mp3\",\n      \"duration\": \"0:30\",\n      \"cover\": \"/covers/Polladha Ulagam.jpg\"\n    }, {\n      \"id\": 4,\n      \"moviename\": \"Vikram\",\n      \"songname\": \"Pathala Pathala\",\n      \"artist\": \"Anirudh Ravichander\",\n      \"language\": \"Tamil\",\n      \"songvariety\": [\"mass\", \"trending\"],\n      \"characters\": \"Kamal Haasan\",\n      \"url\": \"/music/Pathala Pathala.mp3\",\n      \"duration\": \"0:30\",\n      \"cover\": \"/covers/Pathala Pathala.jpg\"\n    }\n    // ... Add more mock songs here for testing dynamic cover image logic ...\n    ];\n    setAllSongs(data);\n    setIsLoading(false);\n  }, []);\n\n  // Navigation handler\n  const handleCategorySelect = category => {\n    // Navigate to the playlist route. The next component will use 'category.id' \n    // to determine if it's a static filter or a dynamic playlist ID.\n    console.log(`Navigating to category: ${category.title || category.name}`);\n    navigate(`/playlist/${category.id}`);\n  };\n\n  // Prepare categories, including the dynamic playlists\n  const categoriesWithCovers = useMemo(() => {\n    const lowerCaseQuery = searchQuery.toLowerCase();\n\n    // 1. Combine Static Categories and Dynamic Playlists\n    const staticCategories = CATEGORIES_CONFIG.filter(category => category.id && category.title);\n\n    // Format dynamic playlists to look like a category object\n    const dynamicPlaylists = playlists.map(p => ({\n      id: p.id,\n      name: `⭐ My Playlist: ${p.name}`,\n      // Use 'name' instead of 'title' for distinction\n      isDynamic: true,\n      // Flag to identify dynamic playlists\n      songs: p.songs // Carry the song array\n      // Dynamic playlists don't need a complex filter function, they just use their 'songs' array\n    }));\n    const allCategories = [...dynamicPlaylists, ...staticCategories];\n\n    // 2. Filter the combined list based on search query\n    const searchableCategories = allCategories.filter(category => {\n      const titleOrName = category.title || category.name;\n      return titleOrName.toLowerCase().includes(lowerCaseQuery) || category.id.includes(lowerCaseQuery);\n    });\n\n    // 3. Map and prepare covers/song data\n    return searchableCategories.map(category => {\n      // Determine the song list based on whether it's dynamic or static\n      const songsToUse = category.isDynamic ? category.songs // Use the stored songs array for dynamic lists\n      : allSongs.filter(category.filter); // Use the filter function for static lists\n\n      // Extract and limit covers\n      const covers = songsToUse.slice(0, 4).map(song => song.cover).filter(cover => cover);\n\n      // Fill up to 4 covers with DEFAULT_COVER\n      while (covers.length < 4) {\n        covers.push(DEFAULT_COVER);\n      }\n      return {\n        ...category,\n        covers,\n        filteredSongs: songsToUse,\n        // Store the songs for potential future use (or remove if only needed for covers)\n        songCount: songsToUse.length\n      };\n    });\n  }, [searchQuery, allSongs, playlists]); // ⭐️ Depend on playlists to re-render when a song is added\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading Categories... \\uD83C\\uDFB6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"categories-page\",\n    children: [\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"page-title\",\n      children: \"Explore Playlists & Artists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: [\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search Playlists or Artists (e.g., Favourites, Anirudh)\",\n        className: \"search-input\",\n        value: searchQuery,\n        onChange: e => setSearchQuery(e.target.value),\n        \"aria-label\": \"Search categories\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", categoriesWithCovers.some(c => c.isDynamic) && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"section-title\",\n        children: \"Your Playlists\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"categories-grid\",\n        children: [\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", categoriesWithCovers.filter(c => c.isDynamic).map(category => /*#__PURE__*/_jsxDEV(CategoryCard, {\n          category: category,\n          covers: category.covers,\n          onSelect: handleCategorySelect\n        }, category.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 33\n        }, this)), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \"]\n    }, void 0, true), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"section-title\",\n      children: \"Static Categories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"categories-grid\",\n      children: [\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", categoriesWithCovers.filter(c => !c.isDynamic).map(category => /*#__PURE__*/_jsxDEV(CategoryCard, {\n        category: category,\n        covers: category.covers,\n        onSelect: handleCategorySelect\n      }, category.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 25\n      }, this)), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", categoriesWithCovers.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-results\",\n        children: [\"No playlists match your search: \\\"\", searchQuery, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 21\n      }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n}\n_s(Categories, \"Yh7+xRsNFZUttZKO1eIdD61Sx4k=\", false, function () {\n  return [useNavigate, useMusicPlayer];\n});\n_c3 = Categories;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CategoryCard$React.memo\");\n$RefreshReg$(_c2, \"CategoryCard\");\n$RefreshReg$(_c3, \"Categories\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useNavigate","useMusicPlayer","jsxDEV","_jsxDEV","Fragment","_Fragment","DEFAULT_COVER","CATEGORIES_CONFIG","id","title","filter","song","_song$language","language","toLowerCase","includes","_song$language2","_song$language3","_song$songvariety","songvariety","_song$songvariety2","_song$songvariety3","_song$songvariety4","_song$songvariety5","_song$songvariety6","_song$songvariety7","_song$songvariety8","_song$songvariety9","_song$songvariety0","_song$artist","artist","_song$artist2","_song$artist3","_song$artist4","_song$artist5","_song$artist6","_song$artist7","_song$artist8","_song$songvariety1","_song$songvariety10","_song$songvariety11","_song$songvariety12","CategoryCard","memo","_c","category","covers","onSelect","cardTitle","name","className","onClick","children","Array","from","length","map","_","i","src","alt","onError","e","target","onerror","fileName","_jsxFileName","lineNumber","columnNumber","_c2","Categories","_s","allSongs","setAllSongs","isLoading","setIsLoading","searchQuery","setSearchQuery","navigate","playlists","data","handleCategorySelect","console","log","categoriesWithCovers","lowerCaseQuery","staticCategories","dynamicPlaylists","p","isDynamic","songs","allCategories","searchableCategories","titleOrName","songsToUse","slice","cover","push","filteredSongs","songCount","type","placeholder","value","onChange","some","c","_c3","$RefreshReg$"],"sources":["D:/5th sem/React projects/Reactcodegpt/music-app/src/pages/Categories.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\"; \r\n// Import the custom hook\r\nimport { useMusicPlayer } from './context/MusicPlayerProvider'; \r\n\r\nimport \"./pages/Categories.css\"; \r\nimport \"../components/Search.css\"; \r\n\r\n// A default cover image for categories that might not have enough songs\r\nconst DEFAULT_COVER = \"https://placehold.co/100x100/303030/ffffff?text=Music\";\r\n\r\n// --- Configuration for all Category/Playlist Cards (Static) ---\r\nconst CATEGORIES_CONFIG = [\r\n    // Languages (Not prominently displayed in the image but kept for completeness)\r\n    { id: \"tamil\", title: \"🇮🇳 Top Tamil Songs\", filter: (song) => song.language?.toLowerCase().includes('tamil') },\r\n    { id: \"english\", title: \"🌍 International English Hits\", filter: (song) => song.language?.toLowerCase().includes('english') },\r\n    { id: \"hindi\", title: \"🎼 Bollywood Hindi Hits\", filter: (song) => song.language?.toLowerCase().includes('hindi') },\r\n    \r\n    // Moods/Genres (Updated for correct spelling/titles/filters from JSON)\r\n    { id: \"trending\", title: \"🔥 Trending Now Package\", filter: (song) => song.songvariety?.includes('trending') },\r\n    { id: \"mass\", title: \"💥 Mass/Kuthu Hits\", filter: (song) => song.songvariety?.includes('mass') },\r\n    { id: \"love\", title: \"💖 Pure Love Songs\", filter: (song) => song.songvariety?.includes('romantic') || song.songvariety?.includes('love') },\r\n    { id: \"sad\", title: \"😢 Sad/Melody\", filter: (song) => song.songvariety?.includes('sad') || song.songvariety?.includes('melancholy') }, // Used 'melancholy' as it appears in the JSON\r\n    { id: \"feel-good\", title: \"😊 Feel Good Hits\", filter: (song) => song.songvariety?.includes('feel good') }, // Correctly filtering by 'feel good' in songvariety\r\n    { id: \"vibe\", title: \"🧘 Vibe/Chill Songs\", filter: (song) => song.songvariety?.includes('vibe') },\r\n    { id: \"party\", title: \"🥳 Party Starters\", filter: (song) => song.songvariety?.includes('party') },\r\n    { id: \"dance\", title: \"💃 Dance Floor Hits\", filter: (song) => song.songvariety?.includes('dance') },\r\n\r\n    // Artist Playlists (Titles match the image, filters use exact JSON artist names)\r\n    { id: \"anirudh\", title: \"🎤 Anirudh Ravichander Playlist\", filter: (song) => song.artist?.includes('Anirudh Ravichander') },\r\n    { id: \"sidsriram\", title: \"🎶 Sid Sriram Collection\", filter: (song) => song.artist?.includes('Sid Sriram') },\r\n    // K. S. Chithra is the correct name in the JSON, not just 'Chitra'\r\n    { id: \"chitra\", title: \"🎤 Chitra's Best Melodies\", filter: (song) => song.artist?.includes('K. S. Chithra') || song.artist?.includes('Chinmayi') }, // K. S. Chithra for better match, using Chinmayi for 'Chitra-like'\r\n    // Hiphop Tamizha has a space in the JSON's artist field for Hiphop Tamizha songs\r\n    { id: \"hiphop-tamizha\", title: \"🎧 Hiphop Tamizha Swag\", filter: (song) => song.artist?.includes('Hiphop Tamizha') },\r\n    { id: \"shreya-ghoshal\", title: \"🌟 Shreya Ghoshal Hits\", filter: (song) => song.artist?.includes('Shreya Ghoshal') },\r\n    { id: \"gvprakash\", title: \"🎹 G. V. Prakash Kumar Songs\", filter: (song) => song.artist?.includes('G.V. Prakash Kumar') },\r\n    // Yuvan Shankar Raja is the correct full name in the JSON\r\n    { id: \"yuvan-raja\", title: \"👑 Yuvan Shankar Raja Classics\", filter: (song) => song.artist?.includes('Yuvan Shankar Raja') },\r\n\r\n\r\n    // Genre Playlists (Titles match the image, filters use correct 'songvariety' values)\r\n    { id: \"peppy\", title: \"⚡ Peppy & Energetic\", filter: (song) => song.songvariety?.includes('peppy') },\r\n    { id: \"romantic-ballads\", title: \"💖 Romantic Ballads\", filter: (song) => song.songvariety?.includes('romantic') || song.songvariety?.includes('ballad') },\r\n    { id: \"instrumental\", title: \"🎻 Classical Instrumental\", filter: (song) => song.songvariety?.includes('instrumental') },\r\n];\r\n\r\n// --- Category Card Component (UNCHANGED) ---\r\nconst CategoryCard = React.memo(({ category, covers, onSelect }) => {\r\n    // Use 'name' for dynamic playlists, 'title' for static categories\r\n    const cardTitle = category.title || category.name; \r\n    \r\n    return (\r\n        <div \r\n            className=\"category-card\" \r\n            onClick={() => onSelect(category)}\r\n            aria-label={`View songs in ${cardTitle}`}\r\n        >\r\n            <div className=\"category-images\">\r\n                {Array.from({ length: 4 }).map((_, i) => (\r\n                    <img \r\n                        key={i} \r\n                        src={covers[i] || DEFAULT_COVER} \r\n                        alt={`${cardTitle} album cover ${i + 1}`} \r\n                        onError={(e) => { e.target.onerror = null; e.target.src = DEFAULT_COVER; }}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <h3>{cardTitle}</h3>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\nexport default function Categories() {\r\n    const [allSongs, setAllSongs] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [searchQuery, setSearchQuery] = useState(''); \r\n    const navigate = useNavigate(); \r\n    \r\n    // ⭐️ Get dynamic playlists from the context\r\n    const { playlists } = useMusicPlayer(); \r\n\r\n    // Fetch all songs once from /songs.json (Correct Implementation)\r\n    useEffect(() => { \r\n        // Using the provided JSON data instead of fetching:\r\n        const data = [\r\n            { \"id\": 1, \"moviename\": \"Theeran\", \"songname\": \"Laali Laali\", \"artist\": \"Sathyaprakash D., Priya Hemesh\", \"language\": \"Tamil\", \"songvariety\": [ \"romantic\", \"love\" ], \"characters\": \"Karthi, Rakul Preet Singh\", \"url\": \"/music/Laali Laali.mp3\", \"duration\": \"0:30\", \"cover\": \"/covers/Laali Laali.jpg\" },\r\n            { \"id\": 2, \"moviename\": \"Jigarthanda\", \"songname\": \"Panda Naatu\", \"artist\": \"Harris Jayaraj\", \"language\": \"Tamil\", \"songvariety\": [ \"mass\", \"dance\" ], \"characters\": \"Siddharth\", \"url\": \"/music/Panda Naatu.mp3\", \"duration\": \"0:30\", \"cover\": \"/covers/Panda Naatu.jpg\" },\r\n            { \"id\": 3, \"moviename\": \"Maaran\", \"songname\": \"Polladha Ulagam\", \"artist\": \"G. V. Prakash Kumar\", \"language\": \"Tamil\", \"songvariety\": [ \"peppy\", \"vibe\" ], \"characters\": \"Dhanush\", \"url\": \"/music/Polladha Ulagam.mp3\", \"duration\": \"0:30\", \"cover\": \"/covers/Polladha Ulagam.jpg\" },\r\n            { \"id\": 4, \"moviename\": \"Vikram\", \"songname\": \"Pathala Pathala\", \"artist\": \"Anirudh Ravichander\", \"language\": \"Tamil\", \"songvariety\": [ \"mass\", \"trending\" ], \"characters\": \"Kamal Haasan\", \"url\": \"/music/Pathala Pathala.mp3\", \"duration\": \"0:30\", \"cover\": \"/covers/Pathala Pathala.jpg\" },\r\n            // ... Add more mock songs here for testing dynamic cover image logic ...\r\n        ];\r\n\r\n        setAllSongs(data); \r\n        setIsLoading(false);\r\n    }, []); \r\n\r\n    // Navigation handler\r\n    const handleCategorySelect = (category) => {\r\n        // Navigate to the playlist route. The next component will use 'category.id' \r\n        // to determine if it's a static filter or a dynamic playlist ID.\r\n        console.log(`Navigating to category: ${category.title || category.name}`);\r\n        navigate(`/playlist/${category.id}`);\r\n    };\r\n\r\n    // Prepare categories, including the dynamic playlists\r\n    const categoriesWithCovers = useMemo(() => {\r\n        const lowerCaseQuery = searchQuery.toLowerCase();\r\n\r\n        // 1. Combine Static Categories and Dynamic Playlists\r\n        const staticCategories = CATEGORIES_CONFIG.filter(category => category.id && category.title);\r\n\r\n        // Format dynamic playlists to look like a category object\r\n        const dynamicPlaylists = playlists.map(p => ({\r\n            id: p.id,\r\n            name: `⭐ My Playlist: ${p.name}`, // Use 'name' instead of 'title' for distinction\r\n            isDynamic: true, // Flag to identify dynamic playlists\r\n            songs: p.songs, // Carry the song array\r\n            // Dynamic playlists don't need a complex filter function, they just use their 'songs' array\r\n        }));\r\n\r\n        const allCategories = [...dynamicPlaylists, ...staticCategories];\r\n\r\n        // 2. Filter the combined list based on search query\r\n        const searchableCategories = allCategories.filter(category => {\r\n            const titleOrName = category.title || category.name;\r\n            return titleOrName.toLowerCase().includes(lowerCaseQuery) || category.id.includes(lowerCaseQuery);\r\n        });\r\n\r\n\r\n        // 3. Map and prepare covers/song data\r\n        return searchableCategories.map(category => {\r\n            // Determine the song list based on whether it's dynamic or static\r\n            const songsToUse = category.isDynamic \r\n                ? category.songs // Use the stored songs array for dynamic lists\r\n                : allSongs.filter(category.filter); // Use the filter function for static lists\r\n\r\n            // Extract and limit covers\r\n            const covers = songsToUse\r\n                .slice(0, 4)\r\n                .map(song => song.cover)\r\n                .filter(cover => cover); \r\n\r\n            // Fill up to 4 covers with DEFAULT_COVER\r\n            while (covers.length < 4) {\r\n                covers.push(DEFAULT_COVER);\r\n            }\r\n\r\n            return {\r\n                ...category,\r\n                covers,\r\n                filteredSongs: songsToUse, // Store the songs for potential future use (or remove if only needed for covers)\r\n                songCount: songsToUse.length\r\n            };\r\n        });\r\n    }, [searchQuery, allSongs, playlists]); // ⭐️ Depend on playlists to re-render when a song is added\r\n\r\n    if (isLoading) {\r\n        return <div className=\"loading\">Loading Categories... 🎶</div>;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"categories-page\">\r\n            <h1 className=\"page-title\">Explore Playlists & Artists</h1>\r\n            <div className=\"search-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search Playlists or Artists (e.g., Favourites, Anirudh)\"\r\n                    className=\"search-input\" \r\n                    value={searchQuery}\r\n                    onChange={(e) => setSearchQuery(e.target.value)}\r\n                    aria-label=\"Search categories\"\r\n                />\r\n            </div>\r\n            \r\n            {/* ⭐️ Display Dynamic Playlists first */}\r\n            {categoriesWithCovers.some(c => c.isDynamic) && (\r\n                <>\r\n                    <h2 className=\"section-title\">Your Playlists</h2>\r\n                    <div className=\"categories-grid\">\r\n                        {categoriesWithCovers\r\n                            .filter(c => c.isDynamic)\r\n                            .map((category) => (\r\n                                <CategoryCard\r\n                                    key={category.id}\r\n                                    category={category}\r\n                                    covers={category.covers}\r\n                                    onSelect={handleCategorySelect}\r\n                                />\r\n                            ))}\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n            {/* Display Static Categories */}\r\n            <h2 className=\"section-title\">Static Categories</h2>\r\n            <div className=\"categories-grid\">\r\n                {categoriesWithCovers\r\n                    .filter(c => !c.isDynamic)\r\n                    .map((category) => (\r\n                        <CategoryCard\r\n                            key={category.id}\r\n                            category={category}\r\n                            covers={category.covers}\r\n                            onSelect={handleCategorySelect}\r\n                        />\r\n                    ))}\r\n                {categoriesWithCovers.length === 0 && (\r\n                    <p className=\"no-results\">No playlists match your search: \"{searchQuery}\"</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC3D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C;AACA,SAASC,cAAc,QAAQ,+BAA+B;AAE9D,OAAO,wBAAwB;AAC/B,OAAO,0BAA0B;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,aAAa,GAAG,uDAAuD;;AAE7E;AACA,MAAMC,iBAAiB,GAAG;AACtB;AACA;EAAEC,EAAE,EAAE,OAAO;EAAEC,KAAK,EAAE,sBAAsB;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAAC,cAAA;IAAA,QAAAA,cAAA,GAAKD,IAAI,CAACE,QAAQ,cAAAD,cAAA,uBAAbA,cAAA,CAAeE,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC;EAAA;AAAC,CAAC,EAChH;EAAEP,EAAE,EAAE,SAAS;EAAEC,KAAK,EAAE,+BAA+B;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAAK,eAAA;IAAA,QAAAA,eAAA,GAAKL,IAAI,CAACE,QAAQ,cAAAG,eAAA,uBAAbA,eAAA,CAAeF,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,SAAS,CAAC;EAAA;AAAC,CAAC,EAC7H;EAAEP,EAAE,EAAE,OAAO;EAAEC,KAAK,EAAE,yBAAyB;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAAM,eAAA;IAAA,QAAAA,eAAA,GAAKN,IAAI,CAACE,QAAQ,cAAAI,eAAA,uBAAbA,eAAA,CAAeH,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC;EAAA;AAAC,CAAC;AAEnH;AACA;EAAEP,EAAE,EAAE,UAAU;EAAEC,KAAK,EAAE,yBAAyB;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAAO,iBAAA;IAAA,QAAAA,iBAAA,GAAKP,IAAI,CAACQ,WAAW,cAAAD,iBAAA,uBAAhBA,iBAAA,CAAkBH,QAAQ,CAAC,UAAU,CAAC;EAAA;AAAC,CAAC,EAC9G;EAAEP,EAAE,EAAE,MAAM;EAAEC,KAAK,EAAE,oBAAoB;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAAS,kBAAA;IAAA,QAAAA,kBAAA,GAAKT,IAAI,CAACQ,WAAW,cAAAC,kBAAA,uBAAhBA,kBAAA,CAAkBL,QAAQ,CAAC,MAAM,CAAC;EAAA;AAAC,CAAC,EACjG;EAAEP,EAAE,EAAE,MAAM;EAAEC,KAAK,EAAE,oBAAoB;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAAU,kBAAA,EAAAC,kBAAA;IAAA,OAAK,EAAAD,kBAAA,GAAAV,IAAI,CAACQ,WAAW,cAAAE,kBAAA,uBAAhBA,kBAAA,CAAkBN,QAAQ,CAAC,UAAU,CAAC,OAAAO,kBAAA,GAAIX,IAAI,CAACQ,WAAW,cAAAG,kBAAA,uBAAhBA,kBAAA,CAAkBP,QAAQ,CAAC,MAAM,CAAC;EAAA;AAAC,CAAC,EAC3I;EAAEP,EAAE,EAAE,KAAK;EAAEC,KAAK,EAAE,eAAe;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAAY,kBAAA,EAAAC,kBAAA;IAAA,OAAK,EAAAD,kBAAA,GAAAZ,IAAI,CAACQ,WAAW,cAAAI,kBAAA,uBAAhBA,kBAAA,CAAkBR,QAAQ,CAAC,KAAK,CAAC,OAAAS,kBAAA,GAAIb,IAAI,CAACQ,WAAW,cAAAK,kBAAA,uBAAhBA,kBAAA,CAAkBT,QAAQ,CAAC,YAAY,CAAC;EAAA;AAAC,CAAC;AAAE;AACxI;EAAEP,EAAE,EAAE,WAAW;EAAEC,KAAK,EAAE,mBAAmB;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAAc,kBAAA;IAAA,QAAAA,kBAAA,GAAKd,IAAI,CAACQ,WAAW,cAAAM,kBAAA,uBAAhBA,kBAAA,CAAkBV,QAAQ,CAAC,WAAW,CAAC;EAAA;AAAC,CAAC;AAAE;AAC5G;EAAEP,EAAE,EAAE,MAAM;EAAEC,KAAK,EAAE,qBAAqB;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAAe,kBAAA;IAAA,QAAAA,kBAAA,GAAKf,IAAI,CAACQ,WAAW,cAAAO,kBAAA,uBAAhBA,kBAAA,CAAkBX,QAAQ,CAAC,MAAM,CAAC;EAAA;AAAC,CAAC,EAClG;EAAEP,EAAE,EAAE,OAAO;EAAEC,KAAK,EAAE,mBAAmB;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAAgB,kBAAA;IAAA,QAAAA,kBAAA,GAAKhB,IAAI,CAACQ,WAAW,cAAAQ,kBAAA,uBAAhBA,kBAAA,CAAkBZ,QAAQ,CAAC,OAAO,CAAC;EAAA;AAAC,CAAC,EAClG;EAAEP,EAAE,EAAE,OAAO;EAAEC,KAAK,EAAE,qBAAqB;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAAiB,kBAAA;IAAA,QAAAA,kBAAA,GAAKjB,IAAI,CAACQ,WAAW,cAAAS,kBAAA,uBAAhBA,kBAAA,CAAkBb,QAAQ,CAAC,OAAO,CAAC;EAAA;AAAC,CAAC;AAEpG;AACA;EAAEP,EAAE,EAAE,SAAS;EAAEC,KAAK,EAAE,iCAAiC;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAAkB,YAAA;IAAA,QAAAA,YAAA,GAAKlB,IAAI,CAACmB,MAAM,cAAAD,YAAA,uBAAXA,YAAA,CAAad,QAAQ,CAAC,qBAAqB,CAAC;EAAA;AAAC,CAAC,EAC3H;EAAEP,EAAE,EAAE,WAAW;EAAEC,KAAK,EAAE,0BAA0B;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAAoB,aAAA;IAAA,QAAAA,aAAA,GAAKpB,IAAI,CAACmB,MAAM,cAAAC,aAAA,uBAAXA,aAAA,CAAahB,QAAQ,CAAC,YAAY,CAAC;EAAA;AAAC,CAAC;AAC7G;AACA;EAAEP,EAAE,EAAE,QAAQ;EAAEC,KAAK,EAAE,2BAA2B;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAAqB,aAAA,EAAAC,aAAA;IAAA,OAAK,EAAAD,aAAA,GAAArB,IAAI,CAACmB,MAAM,cAAAE,aAAA,uBAAXA,aAAA,CAAajB,QAAQ,CAAC,eAAe,CAAC,OAAAkB,aAAA,GAAItB,IAAI,CAACmB,MAAM,cAAAG,aAAA,uBAAXA,aAAA,CAAalB,QAAQ,CAAC,UAAU,CAAC;EAAA;AAAC,CAAC;AAAE;AACrJ;AACA;EAAEP,EAAE,EAAE,gBAAgB;EAAEC,KAAK,EAAE,wBAAwB;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAAuB,aAAA;IAAA,QAAAA,aAAA,GAAKvB,IAAI,CAACmB,MAAM,cAAAI,aAAA,uBAAXA,aAAA,CAAanB,QAAQ,CAAC,gBAAgB,CAAC;EAAA;AAAC,CAAC,EACpH;EAAEP,EAAE,EAAE,gBAAgB;EAAEC,KAAK,EAAE,wBAAwB;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAAwB,aAAA;IAAA,QAAAA,aAAA,GAAKxB,IAAI,CAACmB,MAAM,cAAAK,aAAA,uBAAXA,aAAA,CAAapB,QAAQ,CAAC,gBAAgB,CAAC;EAAA;AAAC,CAAC,EACpH;EAAEP,EAAE,EAAE,WAAW;EAAEC,KAAK,EAAE,8BAA8B;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAAyB,aAAA;IAAA,QAAAA,aAAA,GAAKzB,IAAI,CAACmB,MAAM,cAAAM,aAAA,uBAAXA,aAAA,CAAarB,QAAQ,CAAC,oBAAoB,CAAC;EAAA;AAAC,CAAC;AACzH;AACA;EAAEP,EAAE,EAAE,YAAY;EAAEC,KAAK,EAAE,gCAAgC;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAA0B,aAAA;IAAA,QAAAA,aAAA,GAAK1B,IAAI,CAACmB,MAAM,cAAAO,aAAA,uBAAXA,aAAA,CAAatB,QAAQ,CAAC,oBAAoB,CAAC;EAAA;AAAC,CAAC;AAG5H;AACA;EAAEP,EAAE,EAAE,OAAO;EAAEC,KAAK,EAAE,qBAAqB;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAA2B,kBAAA;IAAA,QAAAA,kBAAA,GAAK3B,IAAI,CAACQ,WAAW,cAAAmB,kBAAA,uBAAhBA,kBAAA,CAAkBvB,QAAQ,CAAC,OAAO,CAAC;EAAA;AAAC,CAAC,EACpG;EAAEP,EAAE,EAAE,kBAAkB;EAAEC,KAAK,EAAE,qBAAqB;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAA4B,mBAAA,EAAAC,mBAAA;IAAA,OAAK,EAAAD,mBAAA,GAAA5B,IAAI,CAACQ,WAAW,cAAAoB,mBAAA,uBAAhBA,mBAAA,CAAkBxB,QAAQ,CAAC,UAAU,CAAC,OAAAyB,mBAAA,GAAI7B,IAAI,CAACQ,WAAW,cAAAqB,mBAAA,uBAAhBA,mBAAA,CAAkBzB,QAAQ,CAAC,QAAQ,CAAC;EAAA;AAAC,CAAC,EAC1J;EAAEP,EAAE,EAAE,cAAc;EAAEC,KAAK,EAAE,2BAA2B;EAAEC,MAAM,EAAGC,IAAI;IAAA,IAAA8B,mBAAA;IAAA,QAAAA,mBAAA,GAAK9B,IAAI,CAACQ,WAAW,cAAAsB,mBAAA,uBAAhBA,mBAAA,CAAkB1B,QAAQ,CAAC,cAAc,CAAC;EAAA;AAAC,CAAC,CAC3H;;AAED;AACA,MAAM2B,YAAY,gBAAG9C,KAAK,CAAC+C,IAAI,CAAAC,EAAA,GAACA,CAAC;EAAEC,QAAQ;EAAEC,MAAM;EAAEC;AAAS,CAAC,KAAK;EAChE;EACA,MAAMC,SAAS,GAAGH,QAAQ,CAACpC,KAAK,IAAIoC,QAAQ,CAACI,IAAI;EAEjD,oBACI9C,OAAA;IACI+C,SAAS,EAAC,eAAe;IACzBC,OAAO,EAAEA,CAAA,KAAMJ,QAAQ,CAACF,QAAQ,CAAE;IAClC,cAAY,iBAAiBG,SAAS,EAAG;IAAAI,QAAA,GAC5C,gCACG,eAAAjD,OAAA;MAAK+C,SAAS,EAAC,iBAAiB;MAAAE,QAAA,GAAC,0CAC7B,EAACC,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAE;MAAE,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,kBAChCvD,OAAA;QAEIwD,GAAG,EAAEb,MAAM,CAACY,CAAC,CAAC,IAAIpD,aAAc;QAChCsD,GAAG,EAAE,GAAGZ,SAAS,gBAAgBU,CAAC,GAAG,CAAC,EAAG;QACzCG,OAAO,EAAGC,CAAC,IAAK;UAAEA,CAAC,CAACC,MAAM,CAACC,OAAO,GAAG,IAAI;UAAEF,CAAC,CAACC,MAAM,CAACJ,GAAG,GAAGrD,aAAa;QAAE;MAAE,GAHtEoD,CAAC;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIT,CACJ,CAAC,EAAC,gCACP;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,kCACN,eAAAjE,OAAA;MAAAiD,QAAA,EAAKJ;IAAS;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,wBACxB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEd,CAAC,CAAC;AAACC,GAAA,GAvBG3B,YAAY;AA0BlB,eAAe,SAAS4B,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG5E,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC6E,SAAS,EAAEC,YAAY,CAAC,GAAG9E,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC+E,WAAW,EAAEC,cAAc,CAAC,GAAGhF,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAMiF,QAAQ,GAAG9E,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAM;IAAE+E;EAAU,CAAC,GAAG9E,cAAc,CAAC,CAAC;;EAEtC;EACAH,SAAS,CAAC,MAAM;IACZ;IACA,MAAMkF,IAAI,GAAG,CACT;MAAE,IAAI,EAAE,CAAC;MAAE,WAAW,EAAE,SAAS;MAAE,UAAU,EAAE,aAAa;MAAE,QAAQ,EAAE,gCAAgC;MAAE,UAAU,EAAE,OAAO;MAAE,aAAa,EAAE,CAAE,UAAU,EAAE,MAAM,CAAE;MAAE,YAAY,EAAE,2BAA2B;MAAE,KAAK,EAAE,wBAAwB;MAAE,UAAU,EAAE,MAAM;MAAE,OAAO,EAAE;IAA0B,CAAC,EAC1S;MAAE,IAAI,EAAE,CAAC;MAAE,WAAW,EAAE,aAAa;MAAE,UAAU,EAAE,aAAa;MAAE,QAAQ,EAAE,gBAAgB;MAAE,UAAU,EAAE,OAAO;MAAE,aAAa,EAAE,CAAE,MAAM,EAAE,OAAO,CAAE;MAAE,YAAY,EAAE,WAAW;MAAE,KAAK,EAAE,wBAAwB;MAAE,UAAU,EAAE,MAAM;MAAE,OAAO,EAAE;IAA0B,CAAC,EAC3Q;MAAE,IAAI,EAAE,CAAC;MAAE,WAAW,EAAE,QAAQ;MAAE,UAAU,EAAE,iBAAiB;MAAE,QAAQ,EAAE,qBAAqB;MAAE,UAAU,EAAE,OAAO;MAAE,aAAa,EAAE,CAAE,OAAO,EAAE,MAAM,CAAE;MAAE,YAAY,EAAE,SAAS;MAAE,KAAK,EAAE,4BAA4B;MAAE,UAAU,EAAE,MAAM;MAAE,OAAO,EAAE;IAA8B,CAAC,EACrR;MAAE,IAAI,EAAE,CAAC;MAAE,WAAW,EAAE,QAAQ;MAAE,UAAU,EAAE,iBAAiB;MAAE,QAAQ,EAAE,qBAAqB;MAAE,UAAU,EAAE,OAAO;MAAE,aAAa,EAAE,CAAE,MAAM,EAAE,UAAU,CAAE;MAAE,YAAY,EAAE,cAAc;MAAE,KAAK,EAAE,4BAA4B;MAAE,UAAU,EAAE,MAAM;MAAE,OAAO,EAAE;IAA8B;IAC5R;IAAA,CACH;IAEDP,WAAW,CAACO,IAAI,CAAC;IACjBL,YAAY,CAAC,KAAK,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,oBAAoB,GAAIpC,QAAQ,IAAK;IACvC;IACA;IACAqC,OAAO,CAACC,GAAG,CAAC,2BAA2BtC,QAAQ,CAACpC,KAAK,IAAIoC,QAAQ,CAACI,IAAI,EAAE,CAAC;IACzE6B,QAAQ,CAAC,aAAajC,QAAQ,CAACrC,EAAE,EAAE,CAAC;EACxC,CAAC;;EAED;EACA,MAAM4E,oBAAoB,GAAGrF,OAAO,CAAC,MAAM;IACvC,MAAMsF,cAAc,GAAGT,WAAW,CAAC9D,WAAW,CAAC,CAAC;;IAEhD;IACA,MAAMwE,gBAAgB,GAAG/E,iBAAiB,CAACG,MAAM,CAACmC,QAAQ,IAAIA,QAAQ,CAACrC,EAAE,IAAIqC,QAAQ,CAACpC,KAAK,CAAC;;IAE5F;IACA,MAAM8E,gBAAgB,GAAGR,SAAS,CAACvB,GAAG,CAACgC,CAAC,KAAK;MACzChF,EAAE,EAAEgF,CAAC,CAAChF,EAAE;MACRyC,IAAI,EAAE,kBAAkBuC,CAAC,CAACvC,IAAI,EAAE;MAAE;MAClCwC,SAAS,EAAE,IAAI;MAAE;MACjBC,KAAK,EAAEF,CAAC,CAACE,KAAK,CAAE;MAChB;IACJ,CAAC,CAAC,CAAC;IAEH,MAAMC,aAAa,GAAG,CAAC,GAAGJ,gBAAgB,EAAE,GAAGD,gBAAgB,CAAC;;IAEhE;IACA,MAAMM,oBAAoB,GAAGD,aAAa,CAACjF,MAAM,CAACmC,QAAQ,IAAI;MAC1D,MAAMgD,WAAW,GAAGhD,QAAQ,CAACpC,KAAK,IAAIoC,QAAQ,CAACI,IAAI;MACnD,OAAO4C,WAAW,CAAC/E,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACsE,cAAc,CAAC,IAAIxC,QAAQ,CAACrC,EAAE,CAACO,QAAQ,CAACsE,cAAc,CAAC;IACrG,CAAC,CAAC;;IAGF;IACA,OAAOO,oBAAoB,CAACpC,GAAG,CAACX,QAAQ,IAAI;MACxC;MACA,MAAMiD,UAAU,GAAGjD,QAAQ,CAAC4C,SAAS,GAC/B5C,QAAQ,CAAC6C,KAAK,CAAC;MAAA,EACflB,QAAQ,CAAC9D,MAAM,CAACmC,QAAQ,CAACnC,MAAM,CAAC,CAAC,CAAC;;MAExC;MACA,MAAMoC,MAAM,GAAGgD,UAAU,CACpBC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXvC,GAAG,CAAC7C,IAAI,IAAIA,IAAI,CAACqF,KAAK,CAAC,CACvBtF,MAAM,CAACsF,KAAK,IAAIA,KAAK,CAAC;;MAE3B;MACA,OAAOlD,MAAM,CAACS,MAAM,GAAG,CAAC,EAAE;QACtBT,MAAM,CAACmD,IAAI,CAAC3F,aAAa,CAAC;MAC9B;MAEA,OAAO;QACH,GAAGuC,QAAQ;QACXC,MAAM;QACNoD,aAAa,EAAEJ,UAAU;QAAE;QAC3BK,SAAS,EAAEL,UAAU,CAACvC;MAC1B,CAAC;IACL,CAAC,CAAC;EACN,CAAC,EAAE,CAACqB,WAAW,EAAEJ,QAAQ,EAAEO,SAAS,CAAC,CAAC,CAAC,CAAC;;EAExC,IAAIL,SAAS,EAAE;IACX,oBAAOvE,OAAA;MAAK+C,SAAS,EAAC,SAAS;MAAAE,QAAA,EAAC;IAAwB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAClE;EAGA,oBACIjE,OAAA;IAAK+C,SAAS,EAAC,iBAAiB;IAAAE,QAAA,GAAC,gCAC7B,eAAAjD,OAAA;MAAI+C,SAAS,EAAC,YAAY;MAAAE,QAAA,EAAC;IAA2B;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,kCAC3D,eAAAjE,OAAA;MAAK+C,SAAS,EAAC,kBAAkB;MAAAE,QAAA,GAAC,0CAC9B,eAAAjD,OAAA;QACIiG,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,yDAAyD;QACrEnD,SAAS,EAAC,cAAc;QACxBoD,KAAK,EAAE1B,WAAY;QACnB2B,QAAQ,EAAGzC,CAAC,IAAKe,cAAc,CAACf,CAAC,CAACC,MAAM,CAACuC,KAAK,CAAE;QAChD,cAAW;MAAmB;QAAArC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC,kCACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,gEAEN,EAA0C,gCAC1C,EAACgB,oBAAoB,CAACoB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAChB,SAAS,CAAC,iBACxCtF,OAAA,CAAAE,SAAA;MAAA+C,QAAA,GAAE,oDACE,eAAAjD,OAAA;QAAI+C,SAAS,EAAC,eAAe;QAAAE,QAAA,EAAC;MAAc;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,sDACjD,eAAAjE,OAAA;QAAK+C,SAAS,EAAC,iBAAiB;QAAAE,QAAA,GAAC,8DAC7B,EAACgC,oBAAoB,CAChB1E,MAAM,CAAC+F,CAAC,IAAIA,CAAC,CAAChB,SAAS,CAAC,CACxBjC,GAAG,CAAEX,QAAQ,iBACV1C,OAAA,CAACuC,YAAY;UAETG,QAAQ,EAAEA,QAAS;UACnBC,MAAM,EAAED,QAAQ,CAACC,MAAO;UACxBC,QAAQ,EAAEkC;QAAqB,GAH1BpC,QAAQ,CAACrC,EAAE;UAAAyD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAInB,CACJ,CAAC,EAAC,oDACX;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,4CACV;IAAA,eAAE,CACL,EAAC,gCAEF,EAAiC,gCACjC,eAAAjE,OAAA;MAAI+C,SAAS,EAAC,eAAe;MAAAE,QAAA,EAAC;IAAiB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,kCACpD,eAAAjE,OAAA;MAAK+C,SAAS,EAAC,iBAAiB;MAAAE,QAAA,GAAC,0CAC7B,EAACgC,oBAAoB,CAChB1E,MAAM,CAAC+F,CAAC,IAAI,CAACA,CAAC,CAAChB,SAAS,CAAC,CACzBjC,GAAG,CAAEX,QAAQ,iBACV1C,OAAA,CAACuC,YAAY;QAETG,QAAQ,EAAEA,QAAS;QACnBC,MAAM,EAAED,QAAQ,CAACC,MAAO;QACxBC,QAAQ,EAAEkC;MAAqB,GAH1BpC,QAAQ,CAACrC,EAAE;QAAAyD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAInB,CACJ,CAAC,EAAC,0CACP,EAACgB,oBAAoB,CAAC7B,MAAM,KAAK,CAAC,iBAC9BpD,OAAA;QAAG+C,SAAS,EAAC,YAAY;QAAAE,QAAA,GAAC,oCAAiC,EAACwB,WAAW,EAAC,IAAC;MAAA;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAC/E,EAAC,gCACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,wBACV;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEd;AAACG,EAAA,CA7IuBD,UAAU;EAAA,QAIbtE,WAAW,EAGNC,cAAc;AAAA;AAAAyG,GAAA,GAPhBpC,UAAU;AAAA,IAAA1B,EAAA,EAAAyB,GAAA,EAAAqC,GAAA;AAAAC,YAAA,CAAA/D,EAAA;AAAA+D,YAAA,CAAAtC,GAAA;AAAAsC,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}