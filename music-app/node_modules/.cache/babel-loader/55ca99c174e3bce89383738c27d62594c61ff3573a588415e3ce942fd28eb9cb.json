{"ast":null,"code":"var _jsxFileName = \"D:\\\\5th sem\\\\React projects\\\\Reactcodegpt\\\\music-app\\\\src\\\\context\\\\MusicPlayerContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useRef, useEffect, useCallback } from 'react';\n// Assuming your player styles are in SongCard.css and accessible globally\nimport '../components/SongCard.css';\n\n// 1. Create Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicPlayerContext = /*#__PURE__*/createContext();\n\n// 2. Custom Hook for easy consumption\nexport const useMusicPlayer = () => {\n  _s();\n  return useContext(MusicPlayerContext);\n};\n\n// Helper function to format seconds (Moved from SongCard.jsx)\n_s(useMusicPlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst formatTime = seconds => {\n  if (isNaN(seconds) || seconds < 0) return \"0:00\";\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = Math.floor(seconds % 60);\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n};\n\n// 3. Provider Component (Holds all state and logic)\nexport const MusicPlayerProvider = ({\n  children\n}) => {\n  _s2();\n  // --- State (Global to the entire app) ---\n  const [songs, setSongs] = useState([]);\n  const [activeSong, setActiveSong] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const audioRef = useRef(null);\n\n  // --- Core Playback Functions (Moved from SongCard.jsx) ---\n\n  const skipTrack = useCallback(direction => {\n    if (!activeSong || songs.length === 0) return;\n    const currentIndex = songs.findIndex(s => s.id === activeSong.id);\n    let newIndex = currentIndex + direction;\n    if (newIndex < 0) {\n      newIndex = songs.length - 1; // Loop to last song\n    } else if (newIndex >= songs.length) {\n      newIndex = 0; // Loop to first song\n    }\n    const nextSong = songs[newIndex];\n    if (nextSong) {\n      setActiveSong(nextSong);\n      setIsPlaying(true);\n    }\n  }, [activeSong, songs]);\n  const handleLoadedMetadata = useCallback(() => {\n    if (audioRef.current) {\n      setDuration(audioRef.current.duration);\n    }\n  }, []);\n  const handleTimeUpdate = useCallback(() => {\n    if (audioRef.current) {\n      setCurrentTime(audioRef.current.currentTime);\n    }\n  }, []);\n  const handleSongEnded = useCallback(() => {\n    skipTrack(1);\n  }, [skipTrack]);\n  const togglePlayPause = () => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    if (isPlaying) {\n      audio.pause();\n    } else {\n      audio.play().catch(e => console.error(\"Play failed:\", e));\n    }\n    setIsPlaying(!isPlaying);\n  };\n  const handleSeek = e => {\n    const audio = audioRef.current;\n    if (audio) {\n      const newTime = parseFloat(e.target.value);\n      audio.currentTime = newTime;\n      setCurrentTime(newTime);\n    }\n  };\n\n  // Function exposed to SongCard.jsx to start/toggle playback\n  const playSong = song => {\n    if ((activeSong === null || activeSong === void 0 ? void 0 : activeSong.id) !== song.id) {\n      setActiveSong(song);\n      setIsPlaying(true);\n    } else {\n      togglePlayPause();\n    }\n  };\n\n  // --- Effects (Moved from SongCard.jsx) ---\n\n  // 1. Attach/Detach event listeners\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    audio.addEventListener('loadedmetadata', handleLoadedMetadata);\n    audio.addEventListener('timeupdate', handleTimeUpdate);\n    audio.addEventListener('ended', handleSongEnded);\n    return () => {\n      audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\n      audio.removeEventListener('timeupdate', handleTimeUpdate);\n      audio.removeEventListener('ended', handleSongEnded);\n    };\n  }, [handleLoadedMetadata, handleTimeUpdate, handleSongEnded, activeSong]);\n\n  // 2. Handles auto-play after song load/change\n  useEffect(() => {\n    if (activeSong && audioRef.current && isPlaying) {\n      audioRef.current.play().catch(e => {\n        console.warn(\"Autoplay prevented. User needs to interact.\");\n        setIsPlaying(false);\n      });\n    }\n  }, [activeSong, isPlaying]);\n  const contextValue = {\n    activeSong,\n    isPlaying,\n    currentTime,\n    duration,\n    songs,\n    playSong,\n    togglePlayPause,\n    skipTrack,\n    handleSeek,\n    setSongs\n  };\n  return /*#__PURE__*/_jsxDEV(MusicPlayerContext.Provider, {\n    value: contextValue,\n    children: [children, activeSong && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioRef,\n        src: activeSong.url,\n        preload: \"auto\"\n      }, activeSong.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"song-info player-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: activeSong.cover,\n          alt: activeSong.songname,\n          className: \"player-cover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: activeSong.songname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: activeSong.artist.split(',')[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => skipTrack(-1),\n            children: \"<<\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: togglePlayPause,\n            children: isPlaying ? '❚❚' : '▶'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => skipTrack(1),\n            children: \">>\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"progress-time\",\n          children: formatTime(currentTime)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: duration || 0,\n          value: currentTime,\n          className: \"progress-bar\",\n          onChange: handleSeek\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"progress-time\",\n          children: formatTime(duration)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          textAlign: 'right'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n};\n_s2(MusicPlayerProvider, \"iAo3FWJM9qPnF8AGStCVUgw3TEg=\");\n_c = MusicPlayerProvider;\nvar _c;\n$RefreshReg$(_c, \"MusicPlayerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useRef","useEffect","useCallback","jsxDEV","_jsxDEV","MusicPlayerContext","useMusicPlayer","_s","formatTime","seconds","isNaN","minutes","Math","floor","remainingSeconds","toString","padStart","MusicPlayerProvider","children","_s2","songs","setSongs","activeSong","setActiveSong","isPlaying","setIsPlaying","currentTime","setCurrentTime","duration","setDuration","audioRef","skipTrack","direction","length","currentIndex","findIndex","s","id","newIndex","nextSong","handleLoadedMetadata","current","handleTimeUpdate","handleSongEnded","togglePlayPause","audio","pause","play","catch","e","console","error","handleSeek","newTime","parseFloat","target","value","playSong","song","addEventListener","removeEventListener","warn","contextValue","Provider","className","ref","src","url","preload","fileName","_jsxFileName","lineNumber","columnNumber","cover","alt","songname","artist","split","onClick","type","min","max","onChange","style","flex","textAlign","_c","$RefreshReg$"],"sources":["D:/5th sem/React projects/Reactcodegpt/music-app/src/context/MusicPlayerContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useRef, useEffect, useCallback } from 'react';\r\n// Assuming your player styles are in SongCard.css and accessible globally\r\nimport '../components/SongCard.css'; \r\n\r\n// 1. Create Context\r\nconst MusicPlayerContext = createContext();\r\n\r\n// 2. Custom Hook for easy consumption\r\nexport const useMusicPlayer = () => {\r\n  return useContext(MusicPlayerContext);\r\n};\r\n\r\n// Helper function to format seconds (Moved from SongCard.jsx)\r\nconst formatTime = (seconds) => {\r\n    if (isNaN(seconds) || seconds < 0) return \"0:00\";\r\n    const minutes = Math.floor(seconds / 60);\r\n    const remainingSeconds = Math.floor(seconds % 60);\r\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\r\n};\r\n\r\n// 3. Provider Component (Holds all state and logic)\r\nexport const MusicPlayerProvider = ({ children }) => {\r\n    // --- State (Global to the entire app) ---\r\n    const [songs, setSongs] = useState([]); \r\n    const [activeSong, setActiveSong] = useState(null);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n    const [duration, setDuration] = useState(0);\r\n    const audioRef = useRef(null);\r\n\r\n    // --- Core Playback Functions (Moved from SongCard.jsx) ---\r\n\r\n    const skipTrack = useCallback((direction) => {\r\n        if (!activeSong || songs.length === 0) return;\r\n        \r\n        const currentIndex = songs.findIndex(s => s.id === activeSong.id);\r\n        let newIndex = currentIndex + direction;\r\n    \r\n        if (newIndex < 0) {\r\n          newIndex = songs.length - 1; // Loop to last song\r\n        } else if (newIndex >= songs.length) {\r\n          newIndex = 0; // Loop to first song\r\n        }\r\n    \r\n        const nextSong = songs[newIndex];\r\n        if (nextSong) {\r\n          setActiveSong(nextSong);\r\n          setIsPlaying(true);\r\n        }\r\n    }, [activeSong, songs]); \r\n\r\n    const handleLoadedMetadata = useCallback(() => {\r\n        if (audioRef.current) {\r\n            setDuration(audioRef.current.duration);\r\n        }\r\n    }, []);\r\n\r\n    const handleTimeUpdate = useCallback(() => {\r\n        if (audioRef.current) {\r\n            setCurrentTime(audioRef.current.currentTime);\r\n        }\r\n    }, []);\r\n\r\n    const handleSongEnded = useCallback(() => {\r\n        skipTrack(1); \r\n    }, [skipTrack]); \r\n\r\n    const togglePlayPause = () => {\r\n        const audio = audioRef.current;\r\n        if (!audio) return;\r\n\r\n        if (isPlaying) {\r\n            audio.pause();\r\n        } else {\r\n            audio.play().catch(e => console.error(\"Play failed:\", e));\r\n        }\r\n        setIsPlaying(!isPlaying);\r\n    };\r\n\r\n    const handleSeek = (e) => {\r\n        const audio = audioRef.current;\r\n        if (audio) {\r\n            const newTime = parseFloat(e.target.value);\r\n            audio.currentTime = newTime;\r\n            setCurrentTime(newTime);\r\n        }\r\n    };\r\n    \r\n    // Function exposed to SongCard.jsx to start/toggle playback\r\n    const playSong = (song) => {\r\n        if (activeSong?.id !== song.id) {\r\n            setActiveSong(song);\r\n            setIsPlaying(true);\r\n        } else {\r\n            togglePlayPause();\r\n        }\r\n    };\r\n\r\n    // --- Effects (Moved from SongCard.jsx) ---\r\n    \r\n    // 1. Attach/Detach event listeners\r\n    useEffect(() => {\r\n        const audio = audioRef.current;\r\n        if (!audio) return;\r\n\r\n        audio.addEventListener('loadedmetadata', handleLoadedMetadata);\r\n        audio.addEventListener('timeupdate', handleTimeUpdate);\r\n        audio.addEventListener('ended', handleSongEnded);\r\n\r\n        return () => {\r\n            audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\r\n            audio.removeEventListener('timeupdate', handleTimeUpdate);\r\n            audio.removeEventListener('ended', handleSongEnded);\r\n        };\r\n    }, [handleLoadedMetadata, handleTimeUpdate, handleSongEnded, activeSong]);\r\n\r\n    // 2. Handles auto-play after song load/change\r\n    useEffect(() => {\r\n        if (activeSong && audioRef.current && isPlaying) {\r\n            audioRef.current.play().catch(e => {\r\n                console.warn(\"Autoplay prevented. User needs to interact.\");\r\n                setIsPlaying(false); \r\n            });\r\n        }\r\n    }, [activeSong, isPlaying]);\r\n\r\n\r\n    const contextValue = {\r\n        activeSong,\r\n        isPlaying,\r\n        currentTime,\r\n        duration,\r\n        songs,\r\n        playSong,       \r\n        togglePlayPause,\r\n        skipTrack,\r\n        handleSeek,\r\n        setSongs        \r\n    };\r\n\r\n    return (\r\n        <MusicPlayerContext.Provider value={contextValue}>\r\n            {children}\r\n            \r\n            {/* --- 4. The Persistent Player JSX --- */}\r\n            {activeSong && (\r\n                <div className=\"player-footer\">\r\n                    <audio \r\n                        ref={audioRef}\r\n                        key={activeSong.id} \r\n                        src={activeSong.url}\r\n                        preload=\"auto\"\r\n                    />\r\n                    \r\n                    {/* Song Info (Cover + Text Block) */}\r\n                    <div className=\"song-info player-info\">\r\n                        <img \r\n                            src={activeSong.cover} \r\n                            alt={activeSong.songname} \r\n                            className=\"player-cover\" \r\n                        />\r\n                        <div>\r\n                            <h4>{activeSong.songname}</h4>\r\n                            <p>{activeSong.artist.split(',')[0]}</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Controls and Progress */}\r\n                    <div className=\"progress-container\">\r\n                        <div className=\"player-controls\">\r\n                            <button onClick={() => skipTrack(-1)}>&lt;&lt;</button>\r\n                            <button onClick={togglePlayPause}>\r\n                                {isPlaying ? '❚❚' : '▶'}\r\n                            </button>\r\n                            <button onClick={() => skipTrack(1)}>&gt;&gt;</button>\r\n                        </div>\r\n\r\n                        {/* Time and Seek Bar */}\r\n                        <span className=\"progress-time\">{formatTime(currentTime)}</span>\r\n                        <input\r\n                            type=\"range\"\r\n                            min=\"0\"\r\n                            max={duration || 0}\r\n                            value={currentTime}\r\n                            className=\"progress-bar\"\r\n                            onChange={handleSeek}\r\n                        />\r\n                        <span className=\"progress-time\">{formatTime(duration)}</span>\r\n                    </div>\r\n\r\n                    {/* Volume and Other Options (Placeholder) */}\r\n                    <div style={{ flex: 1, textAlign: 'right' }}>\r\n                        {/* Placeholder for volume icon or control */}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </MusicPlayerContext.Provider>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}