{"ast":null,"code":"var _jsxFileName = \"D:\\\\5th sem\\\\React projects\\\\Reactcodegpt\\\\music-app\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { useMusicPlayer } from '../context/MusicPlayerContext';\nimport \"./Home.css\";\nimport \"../components/Search.css\"; // Reusing Song Card styles\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SONGS_PER_ROW = 6;\nconst HISTORY_KEY = 'playedSongHistory'; // Key used in MusicPlayerContext for history\n\n// --- LOCAL STORAGE UTILITY ---\n// Gets the list of song IDs that have been played recently\nconst getPlayedHistory = () => {\n  try {\n    const history = localStorage.getItem(HISTORY_KEY);\n    // Returns a Set to ensure unique IDs, then converts to Array\n    return history ? Array.from(new Set(JSON.parse(history))) : [];\n  } catch (e) {\n    return [];\n  }\n};\n\n// --- SongRow Component (with Hover Class) ---\nconst SongRow = /*#__PURE__*/React.memo(_c = ({\n  title,\n  songs,\n  activeSong,\n  isPlaying,\n  playSong,\n  categoryId\n}) => {\n  if (!songs || songs.length === 0) return null;\n\n  // Duplicate the songs array to create a seamless looping effect in CSS\n  const infiniteSongs = [...songs, ...songs];\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"song-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"section-title\",\n      id: `title-${categoryId}`,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `song-row-container ${categoryId}-scroll-area`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"song-row-content\",\n        children: infiniteSongs.map((song, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          // Use index in key since songs are duplicated\n          className: `song-card ${(activeSong === null || activeSong === void 0 ? void 0 : activeSong.id) === song.id && isPlaying ? 'is-playing' : ''}`,\n          onClick: () => playSong(song),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: song.cover,\n            alt: song.songname,\n            className: \"cover\",\n            onError: e => {\n              e.target.onerror = null;\n              e.target.src = \"https://placehold.co/200x200/404040/ffffff?text=No+Cover\";\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: song.songname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: song.artist.split(',')[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 29\n          }, this), song.movieName && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"song-detail\",\n            children: [\"Movie: \", song.movieName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 48\n          }, this)]\n        }, `${song.id}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n});\n_c2 = SongRow;\nexport default function Home() {\n  _s();\n  const [allSongs, setAllSongs] = useState([]);\n  const {\n    activeSong,\n    isPlaying,\n    playSong\n  } = useMusicPlayer();\n\n  // Fetch All Songs\n  useEffect(() => {\n    fetch(\"/songs.json\").then(res => res.json()).then(data => {\n      setAllSongs(data);\n    }).catch(err => console.error(\"Error fetching songs:\", err));\n  }, []);\n\n  // 1. Recently Played Songs (Based on Local Storage History)\n  const recentlyPlayed = useMemo(() => {\n    const historyIds = getPlayedHistory();\n\n    // Find the full song objects that match the IDs, maintaining order\n    const songs = historyIds.map(id => allSongs.find(s => s.id === id)).filter(s => s !== undefined); // Remove any songs not found\n\n    // The history is already ordered from most recent, so we just slice it.\n    return songs.slice(0, SONGS_PER_ROW);\n  }, [allSongs]);\n\n  // 2. Trending Songs (Fetch based on songVerity field)\n  const trendingSongs = useMemo(() => {\n    // ASSUMPTION: 'songVerity' exists in your JSON and is a number (higher is better)\n    const sorted = [...allSongs].sort((a, b) => (b.songVerity || 0) - (a.songVerity || 0));\n    return sorted.slice(0, SONGS_PER_ROW);\n  }, [allSongs]);\n\n  // 3. Tamil Songs\n  const tamilSongs = useMemo(() => {\n    return allSongs.filter(song => song.language && song.language.toLowerCase().includes('tamil')).slice(0, SONGS_PER_ROW);\n  }, [allSongs]);\n\n  // 4. English Songs\n  const englishSongs = useMemo(() => {\n    return allSongs.filter(song => song.language && song.language.toLowerCase().includes('english')).slice(0, SONGS_PER_ROW);\n  }, [allSongs]);\n\n  // 5. Hindi Songs (NEW SECTION)\n  const hindiSongs = useMemo(() => {\n    return allSongs.filter(song => song.language && song.language.toLowerCase().includes('hindi')).slice(0, SONGS_PER_ROW);\n  }, [allSongs]);\n  const isLoading = allSongs.length === 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"main-welcome\",\n      children: \"\\uD83C\\uDFB5 Welcome to My Music Hub\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading-message\",\n      children: \"Loading your music library...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(SongRow, {\n        title: \"Your Recently Played\",\n        songs: recentlyPlayed,\n        categoryId: \"recent\",\n        activeSong: activeSong,\n        isPlaying: isPlaying,\n        playSong: playSong\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(SongRow, {\n        title: \"Global Trending Hits\",\n        songs: trendingSongs,\n        categoryId: \"trending\",\n        activeSong: activeSong,\n        isPlaying: isPlaying,\n        playSong: playSong\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(SongRow, {\n        title: \"Top Tamil Melodies\",\n        songs: tamilSongs,\n        categoryId: \"tamil\",\n        activeSong: activeSong,\n        isPlaying: isPlaying,\n        playSong: playSong\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(SongRow, {\n        title: \"International English Favorites\",\n        songs: englishSongs,\n        categoryId: \"english\",\n        activeSong: activeSong,\n        isPlaying: isPlaying,\n        playSong: playSong\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(SongRow, {\n        title: \"Best of Hindi Cinema\",\n        songs: hindiSongs,\n        categoryId: \"hindi\",\n        activeSong: activeSong,\n        isPlaying: isPlaying,\n        playSong: playSong\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n}\n_s(Home, \"28JPer/G1nWrpZETPLrCxb6B5Ns=\", false, function () {\n  return [useMusicPlayer];\n});\n_c3 = Home;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"SongRow$React.memo\");\n$RefreshReg$(_c2, \"SongRow\");\n$RefreshReg$(_c3, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useMusicPlayer","jsxDEV","_jsxDEV","Fragment","_Fragment","SONGS_PER_ROW","HISTORY_KEY","getPlayedHistory","history","localStorage","getItem","Array","from","Set","JSON","parse","e","SongRow","memo","_c","title","songs","activeSong","isPlaying","playSong","categoryId","length","infiniteSongs","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","map","song","index","onClick","src","cover","alt","songname","onError","target","onerror","artist","split","movieName","_c2","Home","_s","allSongs","setAllSongs","fetch","then","res","json","data","catch","err","console","error","recentlyPlayed","historyIds","find","s","filter","undefined","slice","trendingSongs","sorted","sort","a","b","songVerity","tamilSongs","language","toLowerCase","includes","englishSongs","hindiSongs","isLoading","_c3","$RefreshReg$"],"sources":["D:/5th sem/React projects/Reactcodegpt/music-app/src/pages/Home.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useMusicPlayer } from '../context/MusicPlayerContext';\r\nimport \"./Home.css\"; \r\nimport \"../components/Search.css\"; // Reusing Song Card styles\r\n\r\nconst SONGS_PER_ROW = 6;\r\nconst HISTORY_KEY = 'playedSongHistory'; // Key used in MusicPlayerContext for history\r\n\r\n// --- LOCAL STORAGE UTILITY ---\r\n// Gets the list of song IDs that have been played recently\r\nconst getPlayedHistory = () => {\r\n    try {\r\n        const history = localStorage.getItem(HISTORY_KEY);\r\n        // Returns a Set to ensure unique IDs, then converts to Array\r\n        return history ? Array.from(new Set(JSON.parse(history))) : [];\r\n    } catch (e) {\r\n        return [];\r\n    }\r\n};\r\n\r\n// --- SongRow Component (with Hover Class) ---\r\nconst SongRow = React.memo(({ title, songs, activeSong, isPlaying, playSong, categoryId }) => {\r\n    if (!songs || songs.length === 0) return null;\r\n    \r\n    // Duplicate the songs array to create a seamless looping effect in CSS\r\n    const infiniteSongs = [...songs, ...songs];\r\n\r\n    return (\r\n        <section className=\"song-section\">\r\n            <h2 className=\"section-title\" id={`title-${categoryId}`}>{title}</h2>\r\n            \r\n            {/* The hover class 'hover-scroll' is applied to the section container */}\r\n            <div className={`song-row-container ${categoryId}-scroll-area`}>\r\n                {/* Render the duplicated list for infinite train effect */}\r\n                <div className=\"song-row-content\">\r\n                    {infiniteSongs.map((song, index) => (\r\n                        <div \r\n                            key={`${song.id}-${index}`} // Use index in key since songs are duplicated\r\n                            className={`song-card ${activeSong?.id === song.id && isPlaying ? 'is-playing' : ''}`}\r\n                            onClick={() => playSong(song)}\r\n                        >\r\n                            <img \r\n                                src={song.cover} \r\n                                alt={song.songname} \r\n                                className=\"cover\" \r\n                                onError={(e) => { e.target.onerror = null; e.target.src=\"https://placehold.co/200x200/404040/ffffff?text=No+Cover\"; }}\r\n                            />\r\n                            <h4>{song.songname}</h4>\r\n                            <p>{song.artist.split(',')[0]}</p>\r\n                            {song.movieName && <p className=\"song-detail\">Movie: {song.movieName}</p>}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n});\r\n\r\n\r\nexport default function Home() {\r\n    const [allSongs, setAllSongs] = useState([]);\r\n    const { activeSong, isPlaying, playSong } = useMusicPlayer();\r\n\r\n    // Fetch All Songs\r\n    useEffect(() => {\r\n        fetch(\"/songs.json\")\r\n          .then((res) => res.json())\r\n          .then((data) => {\r\n            setAllSongs(data);\r\n          })\r\n          .catch((err) => console.error(\"Error fetching songs:\", err));\r\n    }, []);\r\n\r\n\r\n    // 1. Recently Played Songs (Based on Local Storage History)\r\n    const recentlyPlayed = useMemo(() => {\r\n        const historyIds = getPlayedHistory();\r\n        \r\n        // Find the full song objects that match the IDs, maintaining order\r\n        const songs = historyIds.map(id => \r\n            allSongs.find(s => s.id === id)\r\n        ).filter(s => s !== undefined); // Remove any songs not found\r\n\r\n        // The history is already ordered from most recent, so we just slice it.\r\n        return songs.slice(0, SONGS_PER_ROW); \r\n    }, [allSongs]);\r\n\r\n    // 2. Trending Songs (Fetch based on songVerity field)\r\n    const trendingSongs = useMemo(() => {\r\n        // ASSUMPTION: 'songVerity' exists in your JSON and is a number (higher is better)\r\n        const sorted = [...allSongs].sort((a, b) => (b.songVerity || 0) - (a.songVerity || 0));\r\n        return sorted.slice(0, SONGS_PER_ROW);\r\n    }, [allSongs]);\r\n\r\n    // 3. Tamil Songs\r\n    const tamilSongs = useMemo(() => {\r\n        return allSongs.filter(song => \r\n            song.language && song.language.toLowerCase().includes('tamil')\r\n        ).slice(0, SONGS_PER_ROW);\r\n    }, [allSongs]);\r\n\r\n    // 4. English Songs\r\n    const englishSongs = useMemo(() => {\r\n        return allSongs.filter(song => \r\n            song.language && song.language.toLowerCase().includes('english')\r\n        ).slice(0, SONGS_PER_ROW);\r\n    }, [allSongs]);\r\n    \r\n    // 5. Hindi Songs (NEW SECTION)\r\n    const hindiSongs = useMemo(() => {\r\n        return allSongs.filter(song => \r\n            song.language && song.language.toLowerCase().includes('hindi')\r\n        ).slice(0, SONGS_PER_ROW);\r\n    }, [allSongs]);\r\n\r\n    const isLoading = allSongs.length === 0;\r\n\r\n    return (\r\n        <div className=\"home-dashboard\">\r\n            <h1 className=\"main-welcome\">🎵 Welcome to My Music Hub</h1>\r\n            \r\n            {isLoading ? (\r\n                <p className=\"loading-message\">Loading your music library...</p>\r\n            ) : (\r\n                <>\r\n                    {/* Row 1: Recently Played */}\r\n                    <SongRow\r\n                        title=\"Your Recently Played\"\r\n                        songs={recentlyPlayed}\r\n                        categoryId=\"recent\"\r\n                        activeSong={activeSong}\r\n                        isPlaying={isPlaying}\r\n                        playSong={playSong}\r\n                    />\r\n\r\n                    {/* Row 2: Global Trending Hits (using songVerity) */}\r\n                    <SongRow\r\n                        title=\"Global Trending Hits\"\r\n                        songs={trendingSongs}\r\n                        categoryId=\"trending\"\r\n                        activeSong={activeSong}\r\n                        isPlaying={isPlaying}\r\n                        playSong={playSong}\r\n                    />\r\n                    \r\n                    {/* Row 3: Top Tamil Melodies */}\r\n                    <SongRow\r\n                        title=\"Top Tamil Melodies\"\r\n                        songs={tamilSongs}\r\n                        categoryId=\"tamil\"\r\n                        activeSong={activeSong}\r\n                        isPlaying={isPlaying}\r\n                        playSong={playSong}\r\n                    />\r\n\r\n                    {/* Row 4: International English Favorites */}\r\n                    <SongRow\r\n                        title=\"International English Favorites\"\r\n                        songs={englishSongs}\r\n                        categoryId=\"english\"\r\n                        activeSong={activeSong}\r\n                        isPlaying={isPlaying}\r\n                        playSong={playSong}\r\n                    />\r\n                    \r\n                    {/* Row 5: Best of Hindi Cinema */}\r\n                    <SongRow\r\n                        title=\"Best of Hindi Cinema\"\r\n                        songs={hindiSongs}\r\n                        categoryId=\"hindi\"\r\n                        activeSong={activeSong}\r\n                        isPlaying={isPlaying}\r\n                        playSong={playSong}\r\n                    />\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}