{"ast":null,"code":"var _jsxFileName = \"D:\\\\5th sem\\\\React projects\\\\Reactcodegpt\\\\music-app\\\\src\\\\components\\\\Search.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { useMusicPlayer } from '../context/MusicPlayerContext';\nimport \"./Search.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Search() {\n  _s();\n  // State for the user's search input query\n  const [query, setQuery] = useState(\"\");\n\n  // State to hold the full list of songs fetched from the JSON file\n  const [allSongs, setAllSongs] = useState([]);\n\n  // Global State/Functions from Music Player Context\n  const {\n    activeSong,\n    isPlaying,\n    playSong,\n    setSongs\n  } = useMusicPlayer();\n\n  // 1. Data Fetching: Load all songs when the component mounts\n  useEffect(() => {\n    fetch(\"/songs.json\").then(res => res.json()).then(data => {\n      const sortedSongs = data.sort((a, b) => a.id - b.id);\n      setAllSongs(sortedSongs);\n\n      // OPTIONAL: Update the global context with the full song list\n      // This is useful if the player needs to skip tracks globally after a search.\n      setSongs(sortedSongs);\n    }).catch(err => console.error(\"Error fetching songs:\", err));\n  }, [setSongs]);\n\n  // 2. Filtered Results Logic (The core search functionality)\n  // useMemo recalculates the results ONLY when 'query' or 'allSongs' changes.\n  const filteredSongs = useMemo(() => {\n    if (!query.trim()) {\n      return allSongs; // If query is empty, show all songs\n    }\n    const lowerQuery = query.toLowerCase();\n    return allSongs.filter(song => {\n      // Check against all specified fields (artist, songname, movie, character, language)\n      return song.songname.toLowerCase().includes(lowerQuery) || song.artist.toLowerCase().includes(lowerQuery) || song.movieName && song.movieName.toLowerCase().includes(lowerQuery) || song.character && song.character.toLowerCase().includes(lowerQuery) || song.language && song.language.toLowerCase().includes(lowerQuery);\n    });\n  }, [query, allSongs]);\n\n  // 3. Render the Search Bar and the Filtered Results\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search by Song, Artist, Movie, Character, or Language...\",\n        value: query,\n        onChange: e => setQuery(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"search-hint\",\n        children: [\"Showing \", filteredSongs.length, \" of \", allSongs.length, \" songs.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-list\",\n      children: filteredSongs.length > 0 ? filteredSongs.map(song => /*#__PURE__*/_jsxDEV(\"div\", {\n        // Use global player state for visual feedback\n        className: `song-card ${(activeSong === null || activeSong === void 0 ? void 0 : activeSong.id) === song.id && isPlaying ? 'is-playing' : ''}`\n        // Clicking the card triggers playback via global context\n        ,\n        onClick: () => playSong(song),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: song.cover,\n          alt: song.songname,\n          className: \"cover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: song.songname\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: song.artist.split(',')[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"song-detail\",\n          children: [\"Movie: \", song.movieName || 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }, this)]\n      }, song.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-results\",\n        children: [\"No songs found matching \\\"\", query, \"\\\". Try a different search term.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n_s(Search, \"MUSLMWcKpaw32f/boJ13LXe0V64=\", false, function () {\n  return [useMusicPlayer];\n});\n_c = Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useMusicPlayer","jsxDEV","_jsxDEV","Search","_s","query","setQuery","allSongs","setAllSongs","activeSong","isPlaying","playSong","setSongs","fetch","then","res","json","data","sortedSongs","sort","a","b","id","catch","err","console","error","filteredSongs","trim","lowerQuery","toLowerCase","filter","song","songname","includes","artist","movieName","character","language","className","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","length","map","onClick","src","cover","alt","split","_c","$RefreshReg$"],"sources":["D:/5th sem/React projects/Reactcodegpt/music-app/src/components/Search.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useMusicPlayer } from '../context/MusicPlayerContext';\r\nimport \"./Search.css\";\r\n\r\nexport default function Search() {\r\n    // State for the user's search input query\r\n    const [query, setQuery] = useState(\"\");\r\n    \r\n    // State to hold the full list of songs fetched from the JSON file\r\n    const [allSongs, setAllSongs] = useState([]);\r\n    \r\n    // Global State/Functions from Music Player Context\r\n    const { activeSong, isPlaying, playSong, setSongs } = useMusicPlayer();\r\n\r\n    // 1. Data Fetching: Load all songs when the component mounts\r\n    useEffect(() => {\r\n        fetch(\"/songs.json\")\r\n          .then((res) => res.json())\r\n          .then((data) => {\r\n            const sortedSongs = data.sort((a, b) => a.id - b.id);\r\n            setAllSongs(sortedSongs);\r\n            \r\n            // OPTIONAL: Update the global context with the full song list\r\n            // This is useful if the player needs to skip tracks globally after a search.\r\n            setSongs(sortedSongs); \r\n          })\r\n          .catch((err) => console.error(\"Error fetching songs:\", err));\r\n    }, [setSongs]);\r\n\r\n\r\n    // 2. Filtered Results Logic (The core search functionality)\r\n    // useMemo recalculates the results ONLY when 'query' or 'allSongs' changes.\r\n    const filteredSongs = useMemo(() => {\r\n        if (!query.trim()) {\r\n            return allSongs; // If query is empty, show all songs\r\n        }\r\n\r\n        const lowerQuery = query.toLowerCase();\r\n\r\n        return allSongs.filter(song => {\r\n            // Check against all specified fields (artist, songname, movie, character, language)\r\n            return (\r\n                song.songname.toLowerCase().includes(lowerQuery) ||\r\n                song.artist.toLowerCase().includes(lowerQuery) ||\r\n                (song.movieName && song.movieName.toLowerCase().includes(lowerQuery)) ||\r\n                (song.character && song.character.toLowerCase().includes(lowerQuery)) ||\r\n                (song.language && song.language.toLowerCase().includes(lowerQuery))\r\n            );\r\n        });\r\n    }, [query, allSongs]);\r\n\r\n\r\n    // 3. Render the Search Bar and the Filtered Results\r\n    return (\r\n        <div className=\"search-page-container\">\r\n            \r\n            {/* Search Input Bar (at the top) */}\r\n            <div className=\"search-input-area\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search by Song, Artist, Movie, Character, or Language...\"\r\n                    value={query}\r\n                    onChange={(e) => setQuery(e.target.value)}\r\n                />\r\n                <p className=\"search-hint\">\r\n                    Showing {filteredSongs.length} of {allSongs.length} songs.\r\n                </p>\r\n            </div>\r\n            \r\n            {/* Filtered Song List (SongCard structure) */}\r\n            <div className=\"song-list\">\r\n                {filteredSongs.length > 0 ? (\r\n                    filteredSongs.map((song) => (\r\n                        <div \r\n                            key={song.id} \r\n                            // Use global player state for visual feedback\r\n                            className={`song-card ${activeSong?.id === song.id && isPlaying ? 'is-playing' : ''}`}\r\n                            // Clicking the card triggers playback via global context\r\n                            onClick={() => playSong(song)}\r\n                        >\r\n                            <img src={song.cover} alt={song.songname} className=\"cover\" />\r\n                            <h4>{song.songname}</h4>\r\n                            <p>{song.artist.split(',')[0]}</p>\r\n                            <p className=\"song-detail\">Movie: {song.movieName || 'N/A'}</p>\r\n                        </div>\r\n                    ))\r\n                ) : (\r\n                    <p className=\"no-results\">No songs found matching \"{query}\". Try a different search term.</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC3D,SAASC,cAAc,QAAQ,+BAA+B;AAC9D,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,eAAe,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAC7B;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAM;IAAEY,UAAU;IAAEC,SAAS;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGZ,cAAc,CAAC,CAAC;;EAEtE;EACAF,SAAS,CAAC,MAAM;IACZe,KAAK,CAAC,aAAa,CAAC,CACjBC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACd,MAAMC,WAAW,GAAGD,IAAI,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,CAAC;MACpDd,WAAW,CAACU,WAAW,CAAC;;MAExB;MACA;MACAN,QAAQ,CAACM,WAAW,CAAC;IACvB,CAAC,CAAC,CACDK,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC,CAAC;EAClE,CAAC,EAAE,CAACZ,QAAQ,CAAC,CAAC;;EAGd;EACA;EACA,MAAMe,aAAa,GAAG5B,OAAO,CAAC,MAAM;IAChC,IAAI,CAACM,KAAK,CAACuB,IAAI,CAAC,CAAC,EAAE;MACf,OAAOrB,QAAQ,CAAC,CAAC;IACrB;IAEA,MAAMsB,UAAU,GAAGxB,KAAK,CAACyB,WAAW,CAAC,CAAC;IAEtC,OAAOvB,QAAQ,CAACwB,MAAM,CAACC,IAAI,IAAI;MAC3B;MACA,OACIA,IAAI,CAACC,QAAQ,CAACH,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,UAAU,CAAC,IAChDG,IAAI,CAACG,MAAM,CAACL,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,UAAU,CAAC,IAC7CG,IAAI,CAACI,SAAS,IAAIJ,IAAI,CAACI,SAAS,CAACN,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,UAAU,CAAE,IACpEG,IAAI,CAACK,SAAS,IAAIL,IAAI,CAACK,SAAS,CAACP,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,UAAU,CAAE,IACpEG,IAAI,CAACM,QAAQ,IAAIN,IAAI,CAACM,QAAQ,CAACR,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,UAAU,CAAE;IAE3E,CAAC,CAAC;EACN,CAAC,EAAE,CAACxB,KAAK,EAAEE,QAAQ,CAAC,CAAC;;EAGrB;EACA,oBACIL,OAAA;IAAKqC,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBAGlCtC,OAAA;MAAKqC,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAC9BtC,OAAA;QACIuC,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,0DAA0D;QACtEC,KAAK,EAAEtC,KAAM;QACbuC,QAAQ,EAAGC,CAAC,IAAKvC,QAAQ,CAACuC,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC,eACFhD,OAAA;QAAGqC,SAAS,EAAC,aAAa;QAAAC,QAAA,GAAC,UACf,EAACb,aAAa,CAACwB,MAAM,EAAC,MAAI,EAAC5C,QAAQ,CAAC4C,MAAM,EAAC,SACvD;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGNhD,OAAA;MAAKqC,SAAS,EAAC,WAAW;MAAAC,QAAA,EACrBb,aAAa,CAACwB,MAAM,GAAG,CAAC,GACrBxB,aAAa,CAACyB,GAAG,CAAEpB,IAAI,iBACnB9B,OAAA;QAEI;QACAqC,SAAS,EAAE,aAAa,CAAA9B,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEa,EAAE,MAAKU,IAAI,CAACV,EAAE,IAAIZ,SAAS,GAAG,YAAY,GAAG,EAAE;QACnF;QAAA;QACA2C,OAAO,EAAEA,CAAA,KAAM1C,QAAQ,CAACqB,IAAI,CAAE;QAAAQ,QAAA,gBAE9BtC,OAAA;UAAKoD,GAAG,EAAEtB,IAAI,CAACuB,KAAM;UAACC,GAAG,EAAExB,IAAI,CAACC,QAAS;UAACM,SAAS,EAAC;QAAO;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC9DhD,OAAA;UAAAsC,QAAA,EAAKR,IAAI,CAACC;QAAQ;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACxBhD,OAAA;UAAAsC,QAAA,EAAIR,IAAI,CAACG,MAAM,CAACsB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAAC;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClChD,OAAA;UAAGqC,SAAS,EAAC,aAAa;UAAAC,QAAA,GAAC,SAAO,EAACR,IAAI,CAACI,SAAS,IAAI,KAAK;QAAA;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAT1DlB,IAAI,CAACV,EAAE;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUX,CACR,CAAC,gBAEFhD,OAAA;QAAGqC,SAAS,EAAC,YAAY;QAAAC,QAAA,GAAC,4BAAyB,EAACnC,KAAK,EAAC,kCAA+B;MAAA;QAAA0C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAC/F;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAC9C,EAAA,CAxFuBD,MAAM;EAAA,QAQ4BH,cAAc;AAAA;AAAA0D,EAAA,GARhDvD,MAAM;AAAA,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}