{"ast":null,"code":"var _jsxFileName = \"D:\\\\5th sem\\\\React projects\\\\Reactcodegpt\\\\music-app\\\\src\\\\components\\\\Search.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { useMusicPlayer } from '../context/MusicPlayerContext';\nimport \"./Search.css\";\n\n// Helper key for localStorage\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RECENT_SEARCHES_KEY = 'recentSearches';\nconst MAX_SUGGESTIONS = 5;\n\n// --- LOCAL STORAGE HELPER FUNCTIONS ---\n\n// 1. Function to get recent searches from local storage\nconst getRecentSearches = () => {\n  try {\n    const searches = localStorage.getItem(RECENT_SEARCHES_KEY);\n    return searches ? JSON.parse(searches) : [];\n  } catch (e) {\n    console.error(\"Could not read recent searches from storage:\", e);\n    return [];\n  }\n};\n\n// 2. Function to add a new query to recent searches\nconst addRecentSearch = newQuery => {\n  if (!newQuery) return;\n\n  // Get existing searches and filter out the current one (to move it to the top)\n  let searches = getRecentSearches().filter(q => q !== newQuery);\n\n  // Add the new query to the beginning of the array\n  searches.unshift(newQuery);\n\n  // Limit the array size\n  searches = searches.slice(0, MAX_SUGGESTIONS);\n  try {\n    localStorage.setItem(RECENT_SEARCHES_KEY, JSON.stringify(searches));\n  } catch (e) {\n    console.error(\"Could not save recent search to storage:\", e);\n  }\n};\nexport default function Search() {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [allSongs, setAllSongs] = useState([]);\n\n  // NEW STATE: Holds the list of recent searches\n  const [recentSearches, setRecentSearches] = useState(getRecentSearches());\n  const {\n    activeSong,\n    isPlaying,\n    playSong,\n    setSongs\n  } = useMusicPlayer();\n  useEffect(() => {\n    // Data Fetching: Load all songs when the component mounts\n    fetch(\"/songs.json\").then(res => res.json()).then(data => {\n      const sortedSongs = data.sort((a, b) => a.id - b.id);\n      setAllSongs(sortedSongs);\n      setSongs(sortedSongs);\n    }).catch(err => console.error(\"Error fetching songs:\", err));\n  }, [setSongs]);\n  const filteredSongs = useMemo(() => {\n    if (!query.trim()) {\n      return allSongs;\n    }\n    const lowerQuery = query.toLowerCase();\n    return allSongs.filter(song => {\n      return song.songname.toLowerCase().includes(lowerQuery) || song.artist.toLowerCase().includes(lowerQuery) ||\n      // ✅ FIX 1: Use 'moviename' (lowercase) as per JSON structure\n      song.moviename && song.moviename.toLowerCase().includes(lowerQuery) ||\n      // ✅ FIX 2: Use 'characters' (plural) as per JSON structure\n      song.characters && song.characters.toLowerCase().includes(lowerQuery) || song.language && song.language.toLowerCase().includes(lowerQuery);\n    });\n  }, [query, allSongs]);\n\n  // NEW FUNCTION: Handle pressing Enter or clicking away from the input\n  const handleSearchSubmit = e => {\n    // We only want to save and run the search when the user intends to filter the list\n    const trimmedQuery = query.trim();\n    if (trimmedQuery) {\n      // Save the query to local storage\n      addRecentSearch(trimmedQuery);\n      // Update the component state for immediate display\n      setRecentSearches(getRecentSearches());\n      // No need to setQuery again here, as typing updates it already.\n    }\n\n    // Prevent default form submission if this were a form element\n    if (e && e.preventDefault) e.preventDefault();\n  };\n\n  // NEW FUNCTION: Apply a suggested query\n  const applySuggestion = suggestedQuery => {\n    setQuery(suggestedQuery);\n    // Immediately treat this as a search submission to save/update recent list\n    addRecentSearch(suggestedQuery);\n    setRecentSearches(getRecentSearches());\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-input-area\",\n      onBlur: handleSearchSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search by Song, Artist, Movie, Character, or Language...\",\n        value: query,\n        onChange: e => setQuery(e.target.value)\n        // NEW: Handles the Enter key press\n        ,\n        onKeyDown: e => {\n          if (e.key === 'Enter') handleSearchSubmit(e);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), recentSearches.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recent-suggestions\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"suggestion-label\",\n          children: \"Recent Searches:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }, this), recentSearches.map(recentQuery => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"suggestion-pill\"\n          // Clicking a pill applies the search\n          ,\n          onClick: () => applySuggestion(recentQuery),\n          children: recentQuery\n        }, recentQuery, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"search-hint\",\n        children: [\"Showing \", filteredSongs.length, \" of \", allSongs.length, \" songs.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-list\",\n      children: filteredSongs.length > 0 ? filteredSongs.map(song => /*#__PURE__*/_jsxDEV(\"div\", {\n        // Ensure the card uses 'song-card' class, which has shared styles\n        className: `song-card ${(activeSong === null || activeSong === void 0 ? void 0 : activeSong.id) === song.id && isPlaying ? 'is-playing' : ''}`,\n        onClick: () => playSong(song),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: song.cover,\n          alt: song.songname,\n          className: \"cover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: song.songname\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: song.artist.split(',')[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 29\n        }, this), song.moviename && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"song-detail\",\n          children: [\"Movie: \", song.moviename]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 48\n        }, this)]\n      }, song.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-results\",\n        children: [\"No songs found matching \\\"\", query, \"\\\". Try a different search term.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n}\n_s(Search, \"C6YZ17KUO2VEU6e9zUy5mBE6v3w=\", false, function () {\n  return [useMusicPlayer];\n});\n_c = Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useMusicPlayer","jsxDEV","_jsxDEV","RECENT_SEARCHES_KEY","MAX_SUGGESTIONS","getRecentSearches","searches","localStorage","getItem","JSON","parse","e","console","error","addRecentSearch","newQuery","filter","q","unshift","slice","setItem","stringify","Search","_s","query","setQuery","allSongs","setAllSongs","recentSearches","setRecentSearches","activeSong","isPlaying","playSong","setSongs","fetch","then","res","json","data","sortedSongs","sort","a","b","id","catch","err","filteredSongs","trim","lowerQuery","toLowerCase","song","songname","includes","artist","moviename","characters","language","handleSearchSubmit","trimmedQuery","preventDefault","applySuggestion","suggestedQuery","className","children","onBlur","type","placeholder","value","onChange","target","onKeyDown","key","fileName","_jsxFileName","lineNumber","columnNumber","length","map","recentQuery","onClick","src","cover","alt","split","_c","$RefreshReg$"],"sources":["D:/5th sem/React projects/Reactcodegpt/music-app/src/components/Search.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useMusicPlayer } from '../context/MusicPlayerContext';\r\nimport \"./Search.css\";\r\n\r\n// Helper key for localStorage\r\nconst RECENT_SEARCHES_KEY = 'recentSearches';\r\nconst MAX_SUGGESTIONS = 5;\r\n\r\n// --- LOCAL STORAGE HELPER FUNCTIONS ---\r\n\r\n// 1. Function to get recent searches from local storage\r\nconst getRecentSearches = () => {\r\n    try {\r\n        const searches = localStorage.getItem(RECENT_SEARCHES_KEY);\r\n        return searches ? JSON.parse(searches) : [];\r\n    } catch (e) {\r\n        console.error(\"Could not read recent searches from storage:\", e);\r\n        return [];\r\n    }\r\n};\r\n\r\n// 2. Function to add a new query to recent searches\r\nconst addRecentSearch = (newQuery) => {\r\n    if (!newQuery) return;\r\n    \r\n    // Get existing searches and filter out the current one (to move it to the top)\r\n    let searches = getRecentSearches().filter(q => q !== newQuery);\r\n    \r\n    // Add the new query to the beginning of the array\r\n    searches.unshift(newQuery);\r\n    \r\n    // Limit the array size\r\n    searches = searches.slice(0, MAX_SUGGESTIONS);\r\n\r\n    try {\r\n        localStorage.setItem(RECENT_SEARCHES_KEY, JSON.stringify(searches));\r\n    } catch (e) {\r\n        console.error(\"Could not save recent search to storage:\", e);\r\n    }\r\n};\r\n\r\n\r\nexport default function Search() {\r\n    const [query, setQuery] = useState(\"\");\r\n    const [allSongs, setAllSongs] = useState([]);\r\n    \r\n    // NEW STATE: Holds the list of recent searches\r\n    const [recentSearches, setRecentSearches] = useState(getRecentSearches());\r\n    \r\n    const { activeSong, isPlaying, playSong, setSongs } = useMusicPlayer();\r\n\r\n    useEffect(() => {\r\n        // Data Fetching: Load all songs when the component mounts\r\n        fetch(\"/songs.json\")\r\n          .then((res) => res.json())\r\n          .then((data) => {\r\n            const sortedSongs = data.sort((a, b) => a.id - b.id);\r\n            setAllSongs(sortedSongs);\r\n            setSongs(sortedSongs); \r\n          })\r\n          .catch((err) => console.error(\"Error fetching songs:\", err));\r\n    }, [setSongs]);\r\n\r\n    const filteredSongs = useMemo(() => {\r\n        if (!query.trim()) {\r\n            return allSongs; \r\n        }\r\n\r\n        const lowerQuery = query.toLowerCase();\r\n\r\n        return allSongs.filter(song => {\r\n            return (\r\n                song.songname.toLowerCase().includes(lowerQuery) ||\r\n                song.artist.toLowerCase().includes(lowerQuery) ||\r\n                // ✅ FIX 1: Use 'moviename' (lowercase) as per JSON structure\r\n                (song.moviename && song.moviename.toLowerCase().includes(lowerQuery)) || \r\n                // ✅ FIX 2: Use 'characters' (plural) as per JSON structure\r\n                (song.characters && song.characters.toLowerCase().includes(lowerQuery)) || \r\n                (song.language && song.language.toLowerCase().includes(lowerQuery))\r\n            );\r\n        });\r\n    }, [query, allSongs]);\r\n\r\n    // NEW FUNCTION: Handle pressing Enter or clicking away from the input\r\n    const handleSearchSubmit = (e) => {\r\n        // We only want to save and run the search when the user intends to filter the list\r\n        const trimmedQuery = query.trim();\r\n        if (trimmedQuery) {\r\n            // Save the query to local storage\r\n            addRecentSearch(trimmedQuery);\r\n            // Update the component state for immediate display\r\n            setRecentSearches(getRecentSearches());\r\n            // No need to setQuery again here, as typing updates it already.\r\n        }\r\n        \r\n        // Prevent default form submission if this were a form element\r\n        if (e && e.preventDefault) e.preventDefault();\r\n    };\r\n\r\n    // NEW FUNCTION: Apply a suggested query\r\n    const applySuggestion = (suggestedQuery) => {\r\n        setQuery(suggestedQuery);\r\n        // Immediately treat this as a search submission to save/update recent list\r\n        addRecentSearch(suggestedQuery); \r\n        setRecentSearches(getRecentSearches());\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"search-page-container\">\r\n            \r\n            <div className=\"search-input-area\" onBlur={handleSearchSubmit}> \r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search by Song, Artist, Movie, Character, or Language...\"\r\n                    value={query}\r\n                    onChange={(e) => setQuery(e.target.value)}\r\n                    // NEW: Handles the Enter key press\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === 'Enter') handleSearchSubmit(e);\r\n                    }}\r\n                />\r\n                \r\n                {/* NEW: Recent Search Suggestions */}\r\n                {recentSearches.length > 0 && (\r\n                    <div className=\"recent-suggestions\">\r\n                        <span className=\"suggestion-label\">Recent Searches:</span>\r\n                        {recentSearches.map((recentQuery) => (\r\n                            <button \r\n                                key={recentQuery} \r\n                                className=\"suggestion-pill\"\r\n                                // Clicking a pill applies the search\r\n                                onClick={() => applySuggestion(recentQuery)}\r\n                            >\r\n                                {recentQuery}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n\r\n                <p className=\"search-hint\">\r\n                    Showing {filteredSongs.length} of {allSongs.length} songs.\r\n                </p>\r\n            </div>\r\n            \r\n            {/* Filtered Song List */}\r\n            <div className=\"song-list\">\r\n                {filteredSongs.length > 0 ? (\r\n                    filteredSongs.map((song) => (\r\n                        <div \r\n                            key={song.id} \r\n                            // Ensure the card uses 'song-card' class, which has shared styles\r\n                            className={`song-card ${activeSong?.id === song.id && isPlaying ? 'is-playing' : ''}`}\r\n                            onClick={() => playSong(song)}\r\n                        >\r\n                            <img src={song.cover} alt={song.songname} className=\"cover\" />\r\n                            <h4>{song.songname}</h4>\r\n                            <p>{song.artist.split(',')[0]}</p>\r\n                            {/* FIX: Use 'moviename' here too */}\r\n                            {song.moviename && <p className=\"song-detail\">Movie: {song.moviename}</p>}\r\n                        </div>\r\n                    ))\r\n                ) : (\r\n                    <p className=\"no-results\">No songs found matching \"{query}\". Try a different search term.</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}