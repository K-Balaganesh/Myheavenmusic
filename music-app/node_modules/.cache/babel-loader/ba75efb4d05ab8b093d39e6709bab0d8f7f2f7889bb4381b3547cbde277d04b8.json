{"ast":null,"code":"var _jsxFileName = \"D:\\\\5th sem\\\\React projects\\\\Reactcodegpt\\\\music-app\\\\src\\\\context\\\\MusicPlayerContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useRef, useEffect, useCallback } from 'react';\n// Assuming your player styles are in SongCard.css and accessible globally\nimport '../components/SongCard.css';\n\n// 1. Create Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicPlayerContext = /*#__PURE__*/createContext();\n\n// 2. Custom Hook for easy consumption\nexport const useMusicPlayer = () => {\n  _s();\n  return useContext(MusicPlayerContext);\n};\n\n// Helper function to format seconds (Moved from SongCard.jsx)\n_s(useMusicPlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst formatTime = seconds => {\n  if (isNaN(seconds) || seconds < 0) return \"0:00\";\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = Math.floor(seconds % 60);\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n};\n\n// Mock data structure for initial playlists\nconst initialPlaylists = [{\n  id: 'p1',\n  name: 'My Favourites',\n  songs: []\n}, {\n  id: 'p2',\n  name: 'Road Trip Jams',\n  songs: []\n}];\n\n// 3. Provider Component (Holds all state and logic)\nexport const MusicPlayerProvider = ({\n  children\n}) => {\n  _s2();\n  // --- State (Global to the entire app) ---\n  const [songs, setSongs] = useState([]);\n  const [activeSong, setActiveSong] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const audioRef = useRef(null);\n\n  // --- NEW: Playlist State ---\n  const [playlists, setPlaylists] = useState(initialPlaylists);\n  // const [currentPlaylist, setCurrentPlaylist] = useState(null); // Useful for playlist playback\n\n  // --- Core Playback Functions (Existing) ---\n\n  const skipTrack = useCallback(direction => {\n    if (!activeSong || songs.length === 0) return;\n    const currentIndex = songs.findIndex(s => s.id === activeSong.id);\n    let newIndex = currentIndex + direction;\n    if (newIndex < 0) {\n      newIndex = songs.length - 1; // Loop to last song\n    } else if (newIndex >= songs.length) {\n      newIndex = 0; // Loop to first song\n    }\n    const nextSong = songs[newIndex];\n    if (nextSong) {\n      setActiveSong(nextSong);\n      setIsPlaying(true);\n    }\n  }, [activeSong, songs]);\n  const handleLoadedMetadata = useCallback(() => {\n    if (audioRef.current) {\n      setDuration(audioRef.current.duration);\n    }\n  }, []);\n  const handleTimeUpdate = useCallback(() => {\n    if (audioRef.current) {\n      setCurrentTime(audioRef.current.currentTime);\n    }\n  }, []);\n  const handleSongEnded = useCallback(() => {\n    skipTrack(1);\n  }, [skipTrack]);\n  const togglePlayPause = () => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    if (isPlaying) {\n      audio.pause();\n    } else {\n      audio.play().catch(e => console.error(\"Play failed:\", e));\n    }\n    setIsPlaying(!isPlaying);\n  };\n  const handleSeek = e => {\n    const audio = audioRef.current;\n    if (audio) {\n      const newTime = parseFloat(e.target.value);\n      audio.currentTime = newTime;\n      setCurrentTime(newTime);\n    }\n  };\n\n  // Function exposed to SongCard.jsx to start/toggle playback\n  const playSong = song => {\n    if ((activeSong === null || activeSong === void 0 ? void 0 : activeSong.id) !== song.id) {\n      setActiveSong(song);\n      setIsPlaying(true);\n    } else {\n      togglePlayPause();\n    }\n  };\n\n  // --- NEW: Playlist Management Functions ---\n\n  const addToPlaylist = useCallback((playlistId, song) => {\n    setPlaylists(prevPlaylists => prevPlaylists.map(playlist => playlist.id === playlistId && !playlist.songs.some(s => s.id === song.id) ? {\n      ...playlist,\n      songs: [...playlist.songs, song]\n    } : playlist));\n    console.log(`Added ${song.songname} to playlist ID: ${playlistId}`);\n  }, []);\n  const createPlaylist = useCallback((name, song = null) => {\n    const newPlaylist = {\n      id: Date.now().toString(),\n      // Simple unique ID\n      name: name || `New Playlist ${playlists.length + 1}`,\n      songs: song ? [song] : [] // Add song if provided\n    };\n    setPlaylists(prevPlaylists => [...prevPlaylists, newPlaylist]);\n    console.log(`Created new playlist: ${newPlaylist.name}`);\n    return newPlaylist;\n  }, [playlists.length]); // Removed activeSong from dependencies to avoid stale closures, and passed it directly if needed\n\n  // --- MODIFIED: Function to handle adding current song to \"My Favourites\" ---\n  const handleAddToPlaylistClick = useCallback(() => {\n    if (!activeSong) {\n      console.warn(\"No active song to add to playlist.\");\n      return;\n    }\n    const MY_FAVOURITES_NAME = 'My Favourites';\n    let favPlaylist = playlists.find(p => p.name === MY_FAVOURITES_NAME);\n    if (favPlaylist) {\n      // Playlist exists, add song\n      addToPlaylist(favPlaylist.id, activeSong);\n    } else {\n      // Playlist does not exist, create it and add the song\n      console.log(`Playlist '${MY_FAVOURITES_NAME}' not found. Creating a new one.`);\n      createPlaylist(MY_FAVOURITES_NAME, activeSong);\n    }\n  }, [activeSong, playlists, addToPlaylist, createPlaylist]);\n  // --- END MODIFIED FUNCTION ---\n\n  // --- Effects (Existing) ---\n\n  // 1. Attach/Detach event listeners\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    audio.addEventListener('loadedmetadata', handleLoadedMetadata);\n    audio.addEventListener('timeupdate', handleTimeUpdate);\n    audio.addEventListener('ended', handleSongEnded);\n    return () => {\n      audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\n      audio.removeEventListener('timeupdate', handleTimeUpdate);\n      audio.removeEventListener('ended', handleSongEnded);\n    };\n  }, [handleLoadedMetadata, handleTimeUpdate, handleSongEnded, activeSong]);\n\n  // 2. Handles auto-play after song load/change\n  useEffect(() => {\n    if (activeSong && audioRef.current && isPlaying) {\n      audioRef.current.play().catch(e => {\n        console.warn(\"Autoplay prevented. User needs to interact.\");\n        setIsPlaying(false);\n      });\n    }\n  }, [activeSong, isPlaying]);\n  const contextValue = {\n    activeSong,\n    isPlaying,\n    currentTime,\n    duration,\n    songs,\n    playSong,\n    togglePlayPause,\n    skipTrack,\n    handleSeek,\n    setSongs,\n    // --- NEW: Playlist Context Values ---\n    playlists,\n    addToPlaylist,\n    createPlaylist\n  };\n  return /*#__PURE__*/_jsxDEV(MusicPlayerContext.Provider, {\n    value: contextValue,\n    children: [children, activeSong && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioRef,\n        src: activeSong.url,\n        preload: \"auto\"\n      }, activeSong.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"song-info player-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: activeSong.cover,\n          alt: activeSong.songname,\n          className: \"player-cover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: activeSong.songname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: activeSong.artist.split(',')[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => skipTrack(-1),\n            children: \"<<\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: togglePlayPause,\n            children: isPlaying ? '❚❚' : '▶'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => skipTrack(1),\n            children: \">>\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"progress-time\",\n          children: formatTime(currentTime)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: duration || 0,\n          value: currentTime,\n          className: \"progress-bar\",\n          onChange: handleSeek\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"progress-time\",\n          children: formatTime(duration)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-options-right\",\n        style: {\n          flex: 1,\n          textAlign: 'right',\n          position: 'relative'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-to-playlist-btn\",\n          onClick: handleAddToPlaylistClick,\n          style: {\n            background: 'none',\n            border: 'none',\n            color: 'white',\n            fontSize: '24px',\n            cursor: 'pointer',\n            padding: '0 10px'\n          },\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 9\n  }, this);\n};\n_s2(MusicPlayerProvider, \"Gn3xBgwqRcSgZdB7lFihvPKcIAY=\");\n_c = MusicPlayerProvider;\nvar _c;\n$RefreshReg$(_c, \"MusicPlayerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useRef","useEffect","useCallback","jsxDEV","_jsxDEV","MusicPlayerContext","useMusicPlayer","_s","formatTime","seconds","isNaN","minutes","Math","floor","remainingSeconds","toString","padStart","initialPlaylists","id","name","songs","MusicPlayerProvider","children","_s2","setSongs","activeSong","setActiveSong","isPlaying","setIsPlaying","currentTime","setCurrentTime","duration","setDuration","audioRef","playlists","setPlaylists","skipTrack","direction","length","currentIndex","findIndex","s","newIndex","nextSong","handleLoadedMetadata","current","handleTimeUpdate","handleSongEnded","togglePlayPause","audio","pause","play","catch","e","console","error","handleSeek","newTime","parseFloat","target","value","playSong","song","addToPlaylist","playlistId","prevPlaylists","map","playlist","some","log","songname","createPlaylist","newPlaylist","Date","now","handleAddToPlaylistClick","warn","MY_FAVOURITES_NAME","favPlaylist","find","p","addEventListener","removeEventListener","contextValue","Provider","className","ref","src","url","preload","fileName","_jsxFileName","lineNumber","columnNumber","cover","alt","artist","split","onClick","type","min","max","onChange","style","flex","textAlign","position","background","border","color","fontSize","cursor","padding","_c","$RefreshReg$"],"sources":["D:/5th sem/React projects/Reactcodegpt/music-app/src/context/MusicPlayerContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useRef, useEffect, useCallback } from 'react';\r\n// Assuming your player styles are in SongCard.css and accessible globally\r\nimport '../components/SongCard.css'; \r\n\r\n// 1. Create Context\r\nconst MusicPlayerContext = createContext();\r\n\r\n// 2. Custom Hook for easy consumption\r\nexport const useMusicPlayer = () => {\r\n    return useContext(MusicPlayerContext);\r\n};\r\n\r\n// Helper function to format seconds (Moved from SongCard.jsx)\r\nconst formatTime = (seconds) => {\r\n    if (isNaN(seconds) || seconds < 0) return \"0:00\";\r\n    const minutes = Math.floor(seconds / 60);\r\n    const remainingSeconds = Math.floor(seconds % 60);\r\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\r\n};\r\n\r\n// Mock data structure for initial playlists\r\nconst initialPlaylists = [\r\n    { id: 'p1', name: 'My Favourites', songs: [] },\r\n    { id: 'p2', name: 'Road Trip Jams', songs: [] },\r\n];\r\n\r\n// 3. Provider Component (Holds all state and logic)\r\nexport const MusicPlayerProvider = ({ children }) => {\r\n    // --- State (Global to the entire app) ---\r\n    const [songs, setSongs] = useState([]); \r\n    const [activeSong, setActiveSong] = useState(null);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n    const [duration, setDuration] = useState(0);\r\n    const audioRef = useRef(null);\r\n    \r\n    // --- NEW: Playlist State ---\r\n    const [playlists, setPlaylists] = useState(initialPlaylists);\r\n    // const [currentPlaylist, setCurrentPlaylist] = useState(null); // Useful for playlist playback\r\n\r\n    // --- Core Playback Functions (Existing) ---\r\n\r\n    const skipTrack = useCallback((direction) => {\r\n        if (!activeSong || songs.length === 0) return;\r\n        \r\n        const currentIndex = songs.findIndex(s => s.id === activeSong.id);\r\n        let newIndex = currentIndex + direction;\r\n        \r\n        if (newIndex < 0) {\r\n            newIndex = songs.length - 1; // Loop to last song\r\n        } else if (newIndex >= songs.length) {\r\n            newIndex = 0; // Loop to first song\r\n        }\r\n        \r\n        const nextSong = songs[newIndex];\r\n        if (nextSong) {\r\n            setActiveSong(nextSong);\r\n            setIsPlaying(true);\r\n        }\r\n    }, [activeSong, songs]); \r\n\r\n    const handleLoadedMetadata = useCallback(() => {\r\n        if (audioRef.current) {\r\n            setDuration(audioRef.current.duration);\r\n        }\r\n    }, []);\r\n\r\n    const handleTimeUpdate = useCallback(() => {\r\n        if (audioRef.current) {\r\n            setCurrentTime(audioRef.current.currentTime);\r\n        }\r\n    }, []);\r\n\r\n    const handleSongEnded = useCallback(() => {\r\n        skipTrack(1); \r\n    }, [skipTrack]); \r\n\r\n    const togglePlayPause = () => {\r\n        const audio = audioRef.current;\r\n        if (!audio) return;\r\n\r\n        if (isPlaying) {\r\n            audio.pause();\r\n        } else {\r\n            audio.play().catch(e => console.error(\"Play failed:\", e));\r\n        }\r\n        setIsPlaying(!isPlaying);\r\n    };\r\n\r\n    const handleSeek = (e) => {\r\n        const audio = audioRef.current;\r\n        if (audio) {\r\n            const newTime = parseFloat(e.target.value);\r\n            audio.currentTime = newTime;\r\n            setCurrentTime(newTime);\r\n        }\r\n    };\r\n    \r\n    // Function exposed to SongCard.jsx to start/toggle playback\r\n    const playSong = (song) => {\r\n        if (activeSong?.id !== song.id) {\r\n            setActiveSong(song);\r\n            setIsPlaying(true);\r\n        } else {\r\n            togglePlayPause();\r\n        }\r\n    };\r\n\r\n    // --- NEW: Playlist Management Functions ---\r\n    \r\n    const addToPlaylist = useCallback((playlistId, song) => {\r\n        setPlaylists(prevPlaylists =>\r\n            prevPlaylists.map(playlist =>\r\n                playlist.id === playlistId && !playlist.songs.some(s => s.id === song.id)\r\n                    ? { ...playlist, songs: [...playlist.songs, song] }\r\n                    : playlist\r\n            )\r\n        );\r\n        console.log(`Added ${song.songname} to playlist ID: ${playlistId}`);\r\n    }, []);\r\n\r\n    const createPlaylist = useCallback((name, song = null) => {\r\n        const newPlaylist = {\r\n            id: Date.now().toString(), // Simple unique ID\r\n            name: name || `New Playlist ${playlists.length + 1}`,\r\n            songs: song ? [song] : [] // Add song if provided\r\n        };\r\n        setPlaylists(prevPlaylists => [...prevPlaylists, newPlaylist]);\r\n        console.log(`Created new playlist: ${newPlaylist.name}`);\r\n        return newPlaylist;\r\n    }, [playlists.length]); // Removed activeSong from dependencies to avoid stale closures, and passed it directly if needed\r\n\r\n    // --- MODIFIED: Function to handle adding current song to \"My Favourites\" ---\r\n    const handleAddToPlaylistClick = useCallback(() => {\r\n        if (!activeSong) {\r\n            console.warn(\"No active song to add to playlist.\");\r\n            return;\r\n        }\r\n\r\n        const MY_FAVOURITES_NAME = 'My Favourites';\r\n        let favPlaylist = playlists.find(p => p.name === MY_FAVOURITES_NAME);\r\n\r\n        if (favPlaylist) {\r\n            // Playlist exists, add song\r\n            addToPlaylist(favPlaylist.id, activeSong);\r\n        } else {\r\n            // Playlist does not exist, create it and add the song\r\n            console.log(`Playlist '${MY_FAVOURITES_NAME}' not found. Creating a new one.`);\r\n            createPlaylist(MY_FAVOURITES_NAME, activeSong);\r\n        }\r\n    }, [activeSong, playlists, addToPlaylist, createPlaylist]);\r\n    // --- END MODIFIED FUNCTION ---\r\n\r\n    // --- Effects (Existing) ---\r\n    \r\n    // 1. Attach/Detach event listeners\r\n    useEffect(() => {\r\n        const audio = audioRef.current;\r\n        if (!audio) return;\r\n\r\n        audio.addEventListener('loadedmetadata', handleLoadedMetadata);\r\n        audio.addEventListener('timeupdate', handleTimeUpdate);\r\n        audio.addEventListener('ended', handleSongEnded);\r\n\r\n        return () => {\r\n            audio.removeEventListener('loadedmetadata', handleLoadedMetadata);\r\n            audio.removeEventListener('timeupdate', handleTimeUpdate);\r\n            audio.removeEventListener('ended', handleSongEnded);\r\n        };\r\n    }, [handleLoadedMetadata, handleTimeUpdate, handleSongEnded, activeSong]);\r\n\r\n    // 2. Handles auto-play after song load/change\r\n    useEffect(() => {\r\n        if (activeSong && audioRef.current && isPlaying) {\r\n            audioRef.current.play().catch(e => {\r\n                console.warn(\"Autoplay prevented. User needs to interact.\");\r\n                setIsPlaying(false); \r\n            });\r\n        }\r\n    }, [activeSong, isPlaying]);\r\n\r\n\r\n    const contextValue = {\r\n        activeSong,\r\n        isPlaying,\r\n        currentTime,\r\n        duration,\r\n        songs,\r\n        playSong, \r\n        togglePlayPause,\r\n        skipTrack,\r\n        handleSeek,\r\n        setSongs,\r\n        // --- NEW: Playlist Context Values ---\r\n        playlists,\r\n        addToPlaylist,\r\n        createPlaylist,\r\n    };\r\n\r\n    return (\r\n        <MusicPlayerContext.Provider value={contextValue}>\r\n            {children}\r\n            \r\n            {/* --- 4. The Persistent Player JSX --- */}\r\n            {activeSong && (\r\n                <div className=\"player-footer\">\r\n                    <audio \r\n                        ref={audioRef}\r\n                        key={activeSong.id} \r\n                        src={activeSong.url}\r\n                        preload=\"auto\"\r\n                    />\r\n                    \r\n                    {/* Song Info (Cover + Text Block) */}\r\n                    <div className=\"song-info player-info\">\r\n                        <img \r\n                            src={activeSong.cover} \r\n                            alt={activeSong.songname} \r\n                            className=\"player-cover\" \r\n                        />\r\n                        <div>\r\n                            <h4>{activeSong.songname}</h4>\r\n                            <p>{activeSong.artist.split(',')[0]}</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Controls and Progress */}\r\n                    <div className=\"progress-container\">\r\n                        <div className=\"player-controls\">\r\n                            <button onClick={() => skipTrack(-1)}>&lt;&lt;</button>\r\n                            <button onClick={togglePlayPause}>\r\n                                {isPlaying ? '❚❚' : '▶'}\r\n                            </button>\r\n                            <button onClick={() => skipTrack(1)}>&gt;&gt;</button>\r\n                        </div>\r\n\r\n                        {/* Time and Seek Bar */}\r\n                        <span className=\"progress-time\">{formatTime(currentTime)}</span>\r\n                        <input\r\n                            type=\"range\"\r\n                            min=\"0\"\r\n                            max={duration || 0}\r\n                            value={currentTime}\r\n                            className=\"progress-bar\"\r\n                            onChange={handleSeek}\r\n                        />\r\n                        <span className=\"progress-time\">{formatTime(duration)}</span>\r\n                    </div>\r\n\r\n                    {/* Volume and Other Options (Placeholder) */}\r\n                    <div className=\"player-options-right\" style={{ flex: 1, textAlign: 'right', position: 'relative' }}>\r\n                        \r\n                        {/* MODIFIED: Changed onMouseEnter to onClick and connected it to the new logic */}\r\n                        <button \r\n                            className=\"add-to-playlist-btn\"\r\n                            onClick={handleAddToPlaylistClick} \r\n                            style={{ \r\n                                background: 'none', \r\n                                border: 'none', \r\n                                color: 'white', \r\n                                fontSize: '24px', \r\n                                cursor: 'pointer',\r\n                                padding: '0 10px'\r\n                            }}\r\n                        >\r\n                            +\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </MusicPlayerContext.Provider>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}