{"ast":null,"code":"var _jsxFileName = \"D:\\\\5th sem\\\\React projects\\\\Reactcodegpt\\\\music-app\\\\src\\\\context\\\\MusicPlayerContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useRef, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicPlayerContext = /*#__PURE__*/createContext();\nexport const useMusicPlayer = () => {\n  _s();\n  return useContext(MusicPlayerContext);\n};\n_s(useMusicPlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst initialPlaylists = [{\n  id: 'p1',\n  name: 'My Favourites',\n  songs: []\n}, {\n  id: 'p2',\n  name: 'Road Trip Jams',\n  songs: []\n}];\nexport const MusicPlayerProvider = ({\n  children\n}) => {\n  _s2();\n  const [songs, setSongs] = useState([]);\n  const [activeSong, setActiveSong] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const audioRef = useRef(null);\n  const [playlists, setPlaylists] = useState(initialPlaylists);\n\n  // NEW: State for the popup\n  const [showPopup, setShowPopup] = useState(false);\n\n  // Function to show the popup for a short duration\n  const triggerPopup = useCallback(() => {\n    setShowPopup(true);\n    const timer = setTimeout(() => {\n      setShowPopup(false);\n    }, 2000); // Popup shown for 2 seconds\n    return () => clearTimeout(timer);\n  }, []);\n\n  // --- Playback controls (omitted for brevity, assume unchanged) ---\n  // ... playNext, playPrevious, togglePlayPause, playSong, handleSeek ...\n\n  const addToPlaylist = useCallback((playlistId, song) => {\n    if (!song) return;\n    setPlaylists(prev => prev.map(pl => pl.id === playlistId ? pl.songs.some(s => s.id === song.id) ? pl : {\n      ...pl,\n      songs: [...pl.songs, song]\n    } : pl));\n  }, []);\n  const createPlaylist = useCallback((name, initialSong = null) => {\n    const newPlaylist = {\n      id: Date.now().toString(),\n      name: name || `New Playlist`,\n      songs: initialSong ? [initialSong] : []\n    };\n    setPlaylists(prev => [...prev, newPlaylist]);\n    return newPlaylist;\n  }, []);\n\n  // MODIFIED: Calls triggerPopup after adding the song\n  const handleAddToPlaylist = useCallback(() => {\n    if (!activeSong) return;\n    let favourites = playlists.find(p => p.name === \"My Favourites\");\n    if (!favourites || !favourites.songs.some(s => s.id === activeSong.id)) {\n      if (!favourites) {\n        createPlaylist(\"My Favourites\", activeSong);\n      } else {\n        addToPlaylist(favourites.id, activeSong);\n      }\n      triggerPopup(); // <-- Trigger the success popup here\n    }\n  }, [activeSong, playlists, addToPlaylist, createPlaylist, triggerPopup]);\n\n  // --- Audio events (omitted for brevity, assume unchanged) ---\n  // ... handleLoadedMetadata, handleTimeUpdate, playNextOrFallback, useEffects ...\n\n  const contextValue = {\n    activeSong,\n    isPlaying,\n    currentTime,\n    duration,\n    songs,\n    setSongs,\n    playSong,\n    togglePlayPause,\n    playNext,\n    playPrevious,\n    handleSeek,\n    playlists,\n    addToPlaylist,\n    createPlaylist,\n    handleAddToPlaylist,\n    // NEW: Add showPopup to context value\n    showPopup\n  };\n  return /*#__PURE__*/_jsxDEV(MusicPlayerContext.Provider, {\n    value: contextValue,\n    children: [children, /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s2(MusicPlayerProvider, \"wBnF4VbdcPGmTis+73NQsao2Qxc=\");\n_c = MusicPlayerProvider;\nvar _c;\n$RefreshReg$(_c, \"MusicPlayerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useRef","useEffect","useCallback","jsxDEV","_jsxDEV","MusicPlayerContext","useMusicPlayer","_s","initialPlaylists","id","name","songs","MusicPlayerProvider","children","_s2","setSongs","activeSong","setActiveSong","isPlaying","setIsPlaying","currentTime","setCurrentTime","duration","setDuration","audioRef","playlists","setPlaylists","showPopup","setShowPopup","triggerPopup","timer","setTimeout","clearTimeout","addToPlaylist","playlistId","song","prev","map","pl","some","s","createPlaylist","initialSong","newPlaylist","Date","now","toString","handleAddToPlaylist","favourites","find","p","contextValue","playSong","togglePlayPause","playNext","playPrevious","handleSeek","Provider","value","ref","style","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/5th sem/React projects/Reactcodegpt/music-app/src/context/MusicPlayerContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useRef, useEffect, useCallback } from 'react';\r\n\r\nconst MusicPlayerContext = createContext();\r\nexport const useMusicPlayer = () => useContext(MusicPlayerContext);\r\n\r\nconst initialPlaylists = [\r\n  { id: 'p1', name: 'My Favourites', songs: [] },\r\n  { id: 'p2', name: 'Road Trip Jams', songs: [] },\r\n];\r\n\r\nexport const MusicPlayerProvider = ({ children }) => {\r\n  const [songs, setSongs] = useState([]); \r\n  const [activeSong, setActiveSong] = useState(null);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const audioRef = useRef(null);\r\n  const [playlists, setPlaylists] = useState(initialPlaylists);\r\n  \r\n  // NEW: State for the popup\r\n  const [showPopup, setShowPopup] = useState(false); \r\n  \r\n  // Function to show the popup for a short duration\r\n  const triggerPopup = useCallback(() => {\r\n    setShowPopup(true);\r\n    const timer = setTimeout(() => {\r\n      setShowPopup(false);\r\n    }, 2000); // Popup shown for 2 seconds\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n\r\n  // --- Playback controls (omitted for brevity, assume unchanged) ---\r\n  // ... playNext, playPrevious, togglePlayPause, playSong, handleSeek ...\r\n\r\n  const addToPlaylist = useCallback((playlistId, song) => {\r\n    if (!song) return;\r\n    setPlaylists(prev =>\r\n      prev.map(pl => pl.id === playlistId\r\n        ? (pl.songs.some(s => s.id === song.id) ? pl : { ...pl, songs: [...pl.songs, song] })\r\n        : pl\r\n      )\r\n    );\r\n  }, []);\r\n\r\n  const createPlaylist = useCallback((name, initialSong = null) => {\r\n    const newPlaylist = {\r\n      id: Date.now().toString(),\r\n      name: name || `New Playlist`,\r\n      songs: initialSong ? [initialSong] : []\r\n    };\r\n    setPlaylists(prev => [...prev, newPlaylist]);\r\n    return newPlaylist;\r\n  }, []);\r\n\r\n  // MODIFIED: Calls triggerPopup after adding the song\r\n  const handleAddToPlaylist = useCallback(() => {\r\n    if (!activeSong) return;\r\n    let favourites = playlists.find(p => p.name === \"My Favourites\");\r\n\r\n    if (!favourites || !favourites.songs.some(s => s.id === activeSong.id)) {\r\n      if (!favourites) {\r\n        createPlaylist(\"My Favourites\", activeSong);\r\n      } else {\r\n        addToPlaylist(favourites.id, activeSong);\r\n      }\r\n      triggerPopup(); // <-- Trigger the success popup here\r\n    }\r\n  }, [activeSong, playlists, addToPlaylist, createPlaylist, triggerPopup]);\r\n\r\n  // --- Audio events (omitted for brevity, assume unchanged) ---\r\n  // ... handleLoadedMetadata, handleTimeUpdate, playNextOrFallback, useEffects ...\r\n\r\n  const contextValue = {\r\n    activeSong,\r\n    isPlaying,\r\n    currentTime,\r\n    duration,\r\n    songs,\r\n    setSongs,\r\n    playSong,\r\n    togglePlayPause,\r\n    playNext,\r\n    playPrevious,\r\n    handleSeek,\r\n    playlists,\r\n    addToPlaylist,\r\n    createPlaylist,\r\n    handleAddToPlaylist,\r\n    // NEW: Add showPopup to context value\r\n    showPopup \r\n  };\r\n\r\n  return (\r\n    <MusicPlayerContext.Provider value={contextValue}>\r\n      {children}\r\n      <audio ref={audioRef} style={{ display: 'none' }} />\r\n    </MusicPlayerContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}