{"ast":null,"code":"var _jsxFileName = \"D:\\\\5th sem\\\\React projects\\\\Reactcodegpt\\\\music-app\\\\src\\\\pages\\\\Categories.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Categories.css\";\nimport \"../components/Search.css\"; // Reuse input styling from Search page\n\n// A default cover image for categories that might not have enough songs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_COVER = \"https://placehold.co/100x100/303030/ffffff?text=Music\";\n\n// --- Configuration for all Category/Playlist Cards ---\nconst CATEGORIES_CONFIG = [\n// Languages\n{\n  id: \"tamil\",\n  title: \"🇮🇳 Top Tamil Songs\",\n  filter: song => {\n    var _song$language;\n    return (_song$language = song.language) === null || _song$language === void 0 ? void 0 : _song$language.toLowerCase().includes('tamil');\n  }\n}, {\n  id: \"english\",\n  title: \"🌍 International English Hits\",\n  filter: song => {\n    var _song$language2;\n    return (_song$language2 = song.language) === null || _song$language2 === void 0 ? void 0 : _song$language2.toLowerCase().includes('english');\n  }\n}, {\n  id: \"hindi\",\n  title: \"🎼 Bollywood Hindi Hits\",\n  filter: song => {\n    var _song$language3;\n    return (_song$language3 = song.language) === null || _song$language3 === void 0 ? void 0 : _song$language3.toLowerCase().includes('hindi');\n  }\n},\n// Playlists/Moods/Genres (Using songvariety array)\n{\n  id: \"trending\",\n  title: \"🔥 Trending Now Package\",\n  filter: song => {\n    var _song$songvariety;\n    return (_song$songvariety = song.songvariety) === null || _song$songvariety === void 0 ? void 0 : _song$songvariety.includes('trending');\n  }\n}, {\n  id: \"mass\",\n  title: \"💥 Mass/Kuthu Hits\",\n  filter: song => {\n    var _song$songvariety2;\n    return (_song$songvariety2 = song.songvariety) === null || _song$songvariety2 === void 0 ? void 0 : _song$songvariety2.includes('mass');\n  }\n}, {\n  id: \"love\",\n  title: \"💖 Pure Love Songs\",\n  filter: song => {\n    var _song$songvariety3, _song$songvariety4;\n    return ((_song$songvariety3 = song.songvariety) === null || _song$songvariety3 === void 0 ? void 0 : _song$songvariety3.includes('romantic')) || ((_song$songvariety4 = song.songvariety) === null || _song$songvariety4 === void 0 ? void 0 : _song$songvariety4.includes('love'));\n  }\n}, {\n  id: \"sad\",\n  title: \"😢 Sad/Melody\",\n  filter: song => {\n    var _song$songvariety5, _song$songvariety6;\n    return ((_song$songvariety5 = song.songvariety) === null || _song$songvariety5 === void 0 ? void 0 : _song$songvariety5.includes('sad')) || ((_song$songvariety6 = song.songvariety) === null || _song$songvariety6 === void 0 ? void 0 : _song$songvariety6.includes('melody'));\n  }\n}, {\n  id: \"vibe\",\n  title: \"🧘 Vibe/Chill Songs\",\n  filter: song => {\n    var _song$songvariety7, _song$songvariety8;\n    return ((_song$songvariety7 = song.songvariety) === null || _song$songvariety7 === void 0 ? void 0 : _song$songvariety7.includes('vibe')) || ((_song$songvariety8 = song.songvariety) === null || _song$songvariety8 === void 0 ? void 0 : _song$songvariety8.includes('chill'));\n  }\n}, {\n  id: \"party\",\n  title: \"🥳 Party Starters\",\n  filter: song => {\n    var _song$songvariety9;\n    return (_song$songvariety9 = song.songvariety) === null || _song$songvariety9 === void 0 ? void 0 : _song$songvariety9.includes('party');\n  }\n}, {\n  id: \"dance\",\n  title: \"💃 Dance Floor Hits\",\n  filter: song => {\n    var _song$songvariety0;\n    return (_song$songvariety0 = song.songvariety) === null || _song$songvariety0 === void 0 ? void 0 : _song$songvariety0.includes('dance');\n  }\n},\n// Artist Playlists (Assuming artist names are comma-separated in the JSON)\n{\n  id: \"anirudh\",\n  title: \"🎤 Anirudh Ravichander Playlist\",\n  filter: song => {\n    var _song$artist;\n    return (_song$artist = song.artist) === null || _song$artist === void 0 ? void 0 : _song$artist.includes('Anirudh Ravichander');\n  }\n}, {\n  id: \"sidsriram\",\n  title: \"🎶 Sid Sriram Collection\",\n  filter: song => {\n    var _song$artist2;\n    return (_song$artist2 = song.artist) === null || _song$artist2 === void 0 ? void 0 : _song$artist2.includes('Sid Sriram');\n  }\n}, {\n  id: \"rock\",\n  title: \"🤘 Rock Anthems\",\n  filter: song => {\n    var _song$genre;\n    return (_song$genre = song.genre) === null || _song$genre === void 0 ? void 0 : _song$genre.toLowerCase().includes('rock');\n  }\n}, {\n  id: \"pop\",\n  title: \"✨ Global Pop\",\n  filter: song => {\n    var _song$genre2;\n    return (_song$genre2 = song.genre) === null || _song$genre2 === void 0 ? void 0 : _song$genre2.toLowerCase().includes('peppy');\n  }\n}, {\n  id: \"classical\",\n  title: \"🎻 Classical Instrumental\",\n  filter: song => {\n    var _song$genre3;\n    return (_song$genre3 = song.genre) === null || _song$genre3 === void 0 ? void 0 : _song$genre3.toLowerCase().includes('instrumental');\n  }\n}];\n\n// --- Category Card Component (UNCHANGED) ---\nconst CategoryCard = /*#__PURE__*/React.memo(_c = ({\n  category,\n  covers,\n  onSelect\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"category-card\",\n    onClick: () => onSelect(category),\n    \"aria-label\": `View songs in ${category.title}`,\n    children: [\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category-images\",\n      children: [\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", Array.from({\n        length: 4\n      }).map((_, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: covers[i] || DEFAULT_COVER,\n        alt: `${category.title} album cover ${i + 1}`,\n        onError: e => {\n          e.target.onerror = null;\n          e.target.src = DEFAULT_COVER;\n        }\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: category.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n});\n_c2 = CategoryCard;\nexport default function Categories() {\n  _s();\n  const [allSongs, setAllSongs] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  // NEW: State for search input\n  const [searchQuery, setSearchQuery] = useState('');\n  const navigate = useNavigate();\n\n  // Fetch all songs once\n  useEffect(() => {\n    setIsLoading(true);\n    fetch(\"/songs.json\").then(res => res.json()).then(data => {\n      setAllSongs(data);\n      setIsLoading(false);\n    }).catch(err => {\n      console.error(\"Error fetching songs:\", err);\n      setIsLoading(false);\n    });\n  }, []);\n\n  // Prepare categories, filtering songs and getting covers\n  const categoriesWithCovers = useMemo(() => {\n    if (allSongs.length === 0) return [];\n\n    // 1. First, filter the static config list based on search query\n    const lowerCaseQuery = searchQuery.toLowerCase();\n    const searchableCategories = CATEGORIES_CONFIG.filter(category => category.title.toLowerCase().includes(lowerCaseQuery) || category.id.includes(lowerCaseQuery) // Allows searching by ID/key too\n    );\n\n    // 2. Then, map and filter songs for the covers and detail data\n    return searchableCategories.map(category => {\n      const filteredSongs = allSongs.filter(category.filter);\n      const covers = filteredSongs.slice(0, 4).map(song => song.cover).filter(cover => cover);\n      return {\n        ...category,\n        covers: covers,\n        filteredSongs: filteredSongs,\n        songCount: filteredSongs.length\n      };\n    });\n  }, [allSongs, searchQuery]); // Re-run memo when allSongs or searchQuery changes\n\n  // Handler for clicking a category card (UNCHANGED)\n  const handleCategoryClick = category => {\n    navigate(`/categories/${category.id}`, {\n      state: {\n        title: category.title,\n        songs: category.filteredSongs\n      }\n    });\n  };\n\n  // Determine content based on state\n  let content;\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading-message\",\n      children: \"Loading categories...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 19\n    }, this);\n  } else if (categoriesWithCovers.length === 0 && searchQuery) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-results-message\",\n      children: [\"No categories found matching \\\"\", searchQuery, \"\\\".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 19\n    }, this);\n  } else if (categoriesWithCovers.length === 0) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-results-message\",\n      children: \"No categories found or defined.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 19\n    }, this);\n  } else {\n    // Show the actual grid\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category-grid\",\n      children: categoriesWithCovers.map(category => /*#__PURE__*/_jsxDEV(CategoryCard, {\n        category: category,\n        covers: category.covers,\n        onSelect: handleCategoryClick\n      }, category.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"categories-page\",\n    children: [\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"categories-title\",\n      children: \"Browse All Categories & Playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-bar-container categories-search\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search categories and playlists...\",\n        value: searchQuery,\n        onChange: e => setSearchQuery(e.target.value),\n        className: \"search-input\",\n        \"aria-label\": \"Search categories\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), content, \"\\xA0 \\xA0 \\xA0 \\xA0 \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 9\n  }, this);\n}\n_s(Categories, \"u8MI/xyEDV4HhmQGO93iEdGjFSo=\", false, function () {\n  return [useNavigate];\n});\n_c3 = Categories;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CategoryCard$React.memo\");\n$RefreshReg$(_c2, \"CategoryCard\");\n$RefreshReg$(_c3, \"Categories\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useNavigate","jsxDEV","_jsxDEV","DEFAULT_COVER","CATEGORIES_CONFIG","id","title","filter","song","_song$language","language","toLowerCase","includes","_song$language2","_song$language3","_song$songvariety","songvariety","_song$songvariety2","_song$songvariety3","_song$songvariety4","_song$songvariety5","_song$songvariety6","_song$songvariety7","_song$songvariety8","_song$songvariety9","_song$songvariety0","_song$artist","artist","_song$artist2","_song$genre","genre","_song$genre2","_song$genre3","CategoryCard","memo","_c","category","covers","onSelect","className","onClick","children","Array","from","length","map","_","i","src","alt","onError","e","target","onerror","fileName","_jsxFileName","lineNumber","columnNumber","_c2","Categories","_s","allSongs","setAllSongs","isLoading","setIsLoading","searchQuery","setSearchQuery","navigate","fetch","then","res","json","data","catch","err","console","error","categoriesWithCovers","lowerCaseQuery","searchableCategories","filteredSongs","slice","cover","songCount","handleCategoryClick","state","songs","content","type","placeholder","value","onChange","_c3","$RefreshReg$"],"sources":["D:/5th sem/React projects/Reactcodegpt/music-app/src/pages/Categories.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\"; \r\nimport \"./Categories.css\"; \r\nimport \"../components/Search.css\"; // Reuse input styling from Search page\r\n\r\n// A default cover image for categories that might not have enough songs\r\nconst DEFAULT_COVER = \"https://placehold.co/100x100/303030/ffffff?text=Music\";\r\n\r\n// --- Configuration for all Category/Playlist Cards ---\r\nconst CATEGORIES_CONFIG = [\r\n    // Languages\r\n    { id: \"tamil\", title: \"🇮🇳 Top Tamil Songs\", filter: (song) => song.language?.toLowerCase().includes('tamil') },\r\n    { id: \"english\", title: \"🌍 International English Hits\", filter: (song) => song.language?.toLowerCase().includes('english') },\r\n    { id: \"hindi\", title: \"🎼 Bollywood Hindi Hits\", filter: (song) => song.language?.toLowerCase().includes('hindi') },\r\n    \r\n    // Playlists/Moods/Genres (Using songvariety array)\r\n    { id: \"trending\", title: \"🔥 Trending Now Package\", filter: (song) => song.songvariety?.includes('trending') },\r\n    { id: \"mass\", title: \"💥 Mass/Kuthu Hits\", filter: (song) => song.songvariety?.includes('mass') },\r\n    { id: \"love\", title: \"💖 Pure Love Songs\", filter: (song) => song.songvariety?.includes('romantic') || song.songvariety?.includes('love') },\r\n    { id: \"sad\", title: \"😢 Sad/Melody\", filter: (song) => song.songvariety?.includes('sad') || song.songvariety?.includes('melody') },\r\n    { id: \"vibe\", title: \"🧘 Vibe/Chill Songs\", filter: (song) => song.songvariety?.includes('vibe') || song.songvariety?.includes('chill') },\r\n    { id: \"party\", title: \"🥳 Party Starters\", filter: (song) => song.songvariety?.includes('party') },\r\n    { id: \"dance\", title: \"💃 Dance Floor Hits\", filter: (song) => song.songvariety?.includes('dance') },\r\n\r\n    // Artist Playlists (Assuming artist names are comma-separated in the JSON)\r\n    { id: \"anirudh\", title: \"🎤 Anirudh Ravichander Playlist\", filter: (song) => song.artist?.includes('Anirudh Ravichander') },\r\n    { id: \"sidsriram\", title: \"🎶 Sid Sriram Collection\", filter: (song) => song.artist?.includes('Sid Sriram') },\r\n    { id: \"rock\", title: \"🤘 Rock Anthems\", filter: (song) => song.genre?.toLowerCase().includes('rock') },\r\n    { id: \"pop\", title: \"✨ Global Pop\", filter: (song) => song.genre?.toLowerCase().includes('peppy') },\r\n    { id: \"classical\", title: \"🎻 Classical Instrumental\", filter: (song) => song.genre?.toLowerCase().includes('instrumental') },\r\n];\r\n\r\n// --- Category Card Component (UNCHANGED) ---\r\nconst CategoryCard = React.memo(({ category, covers, onSelect }) => {\r\n    return (\r\n        <div \r\n            className=\"category-card\" \r\n            onClick={() => onSelect(category)}\r\n            aria-label={`View songs in ${category.title}`}\r\n        >\r\n            <div className=\"category-images\">\r\n                {Array.from({ length: 4 }).map((_, i) => (\r\n                    <img \r\n                        key={i} \r\n                        src={covers[i] || DEFAULT_COVER} \r\n                        alt={`${category.title} album cover ${i + 1}`} \r\n                        onError={(e) => { e.target.onerror = null; e.target.src = DEFAULT_COVER; }}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <h3>{category.title}</h3>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\nexport default function Categories() {\r\n    const [allSongs, setAllSongs] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    // NEW: State for search input\r\n    const [searchQuery, setSearchQuery] = useState(''); \r\n    const navigate = useNavigate(); \r\n\r\n    // Fetch all songs once\r\n    useEffect(() => { \r\n        setIsLoading(true);\r\n        fetch(\"/songs.json\") \r\n          .then((res) => res.json()) \r\n          .then((data) => { \r\n            setAllSongs(data); \r\n            setIsLoading(false);\r\n          }) \r\n          .catch((err) => {\r\n                console.error(\"Error fetching songs:\", err);\r\n                setIsLoading(false);\r\n            }); \r\n    }, []); \r\n\r\n    // Prepare categories, filtering songs and getting covers\r\n    const categoriesWithCovers = useMemo(() => {\r\n        if (allSongs.length === 0) return [];\r\n\r\n        // 1. First, filter the static config list based on search query\r\n        const lowerCaseQuery = searchQuery.toLowerCase();\r\n        const searchableCategories = CATEGORIES_CONFIG.filter(category => \r\n            category.title.toLowerCase().includes(lowerCaseQuery) ||\r\n            category.id.includes(lowerCaseQuery) // Allows searching by ID/key too\r\n        );\r\n\r\n        // 2. Then, map and filter songs for the covers and detail data\r\n        return searchableCategories.map(category => {\r\n            const filteredSongs = allSongs.filter(category.filter);\r\n            const covers = filteredSongs\r\n                .slice(0, 4)\r\n                .map(song => song.cover)\r\n                .filter(cover => cover); \r\n\r\n            return {\r\n                ...category,\r\n                covers: covers,\r\n                filteredSongs: filteredSongs, \r\n                songCount: filteredSongs.length\r\n            };\r\n        });\r\n    }, [allSongs, searchQuery]); // Re-run memo when allSongs or searchQuery changes\r\n\r\n    // Handler for clicking a category card (UNCHANGED)\r\n    const handleCategoryClick = (category) => {\r\n        navigate(`/categories/${category.id}`, { \r\n            state: { \r\n                title: category.title,\r\n                songs: category.filteredSongs \r\n            } \r\n        });\r\n    };\r\n    \r\n    // Determine content based on state\r\n    let content;\r\n\r\n    if (isLoading) {\r\n        content = <p className=\"loading-message\">Loading categories...</p>;\r\n    } else if (categoriesWithCovers.length === 0 && searchQuery) {\r\n        content = <p className=\"no-results-message\">No categories found matching \"{searchQuery}\".</p>;\r\n    } else if (categoriesWithCovers.length === 0) {\r\n        content = <p className=\"no-results-message\">No categories found or defined.</p>;\r\n    } else {\r\n        // Show the actual grid\r\n        content = (\r\n            <div className=\"category-grid\">\r\n                {categoriesWithCovers.map((category) => (\r\n                    <CategoryCard \r\n                        key={category.id} \r\n                        category={category}\r\n                        covers={category.covers}\r\n                        onSelect={handleCategoryClick}\r\n                    />\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"categories-page\">\r\n            <h2 className=\"categories-title\">Browse All Categories & Playlists</h2>\r\n            \r\n            {/* NEW: Search Bar */}\r\n            <div className=\"search-bar-container categories-search\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search categories and playlists...\"\r\n                    value={searchQuery}\r\n                    onChange={(e) => setSearchQuery(e.target.value)}\r\n                    className=\"search-input\"\r\n                    aria-label=\"Search categories\"\r\n                />\r\n            </div>\r\n            \r\n            {content}\r\n        </div>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}