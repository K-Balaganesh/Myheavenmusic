{"ast":null,"code":"var _jsxFileName = \"D:\\\\5th sem\\\\React projects\\\\Reactcodegpt\\\\music-app\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n\n  // NEW: Pop-up state and message\n  const [showAuthPopup, setShowAuthPopup] = useState(false);\n  const [authPopupMessage, setAuthPopupMessage] = useState(\"\");\n  useEffect(() => {\n    const storedUser = localStorage.getItem(\"user\");\n    if (storedUser) setUser(JSON.parse(storedUser));\n  }, []);\n\n  // NEW: Function to display the pop-up\n  const triggerAuthPopup = useCallback(message => {\n    setAuthPopupMessage(message);\n    setShowAuthPopup(true);\n    const timer = setTimeout(() => {\n      setShowAuthPopup(false);\n      setAuthPopupMessage(\"\");\n    }, 2500); // Popup shown for 2.5 seconds\n    return () => clearTimeout(timer);\n  }, []);\n  const login = userData => {\n    // In a real app, this would involve API calls and token storage\n    setUser(userData);\n    localStorage.setItem(\"user\", JSON.stringify(userData));\n    // NOTE: Pop-up trigger moved to Login/Signup components for contextual messaging\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"user\");\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      showAuthPopup,\n      authPopupMessage,\n      triggerAuthPopup\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"QEcFpWaZgqK34VoPZlgOvNst560=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useCallback","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","showAuthPopup","setShowAuthPopup","authPopupMessage","setAuthPopupMessage","storedUser","localStorage","getItem","JSON","parse","triggerAuthPopup","message","timer","setTimeout","clearTimeout","login","userData","setItem","stringify","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["D:/5th sem/React projects/Reactcodegpt/music-app/src/context/AuthContext.jsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect, useCallback } from \"react\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  \r\n  // NEW: Pop-up state and message\r\n  const [showAuthPopup, setShowAuthPopup] = useState(false);\r\n  const [authPopupMessage, setAuthPopupMessage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem(\"user\");\r\n    if (storedUser) setUser(JSON.parse(storedUser));\r\n  }, []);\r\n  \r\n  // NEW: Function to display the pop-up\r\n  const triggerAuthPopup = useCallback((message) => {\r\n    setAuthPopupMessage(message);\r\n    setShowAuthPopup(true);\r\n    const timer = setTimeout(() => {\r\n      setShowAuthPopup(false);\r\n      setAuthPopupMessage(\"\");\r\n    }, 2500); // Popup shown for 2.5 seconds\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  const login = (userData) => {\r\n    // In a real app, this would involve API calls and token storage\r\n    setUser(userData);\r\n    localStorage.setItem(\"user\", JSON.stringify(userData));\r\n    // NOTE: Pop-up trigger moved to Login/Signup components for contextual messaging\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem(\"user\");\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout, showAuthPopup, authPopupMessage, triggerAuthPopup }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpF,OAAO,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACA,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACa,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE5DC,SAAS,CAAC,MAAM;IACd,MAAMc,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAEL,OAAO,CAACQ,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;EACjD,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMK,gBAAgB,GAAGlB,WAAW,CAAEmB,OAAO,IAAK;IAChDP,mBAAmB,CAACO,OAAO,CAAC;IAC5BT,gBAAgB,CAAC,IAAI,CAAC;IACtB,MAAMU,KAAK,GAAGC,UAAU,CAAC,MAAM;MAC7BX,gBAAgB,CAAC,KAAK,CAAC;MACvBE,mBAAmB,CAAC,EAAE,CAAC;IACzB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACV,OAAO,MAAMU,YAAY,CAACF,KAAK,CAAC;EAClC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,KAAK,GAAIC,QAAQ,IAAK;IAC1B;IACAhB,OAAO,CAACgB,QAAQ,CAAC;IACjBV,YAAY,CAACW,OAAO,CAAC,MAAM,EAAET,IAAI,CAACU,SAAS,CAACF,QAAQ,CAAC,CAAC;IACtD;EACF,CAAC;EAED,MAAMG,MAAM,GAAGA,CAAA,KAAM;IACnBnB,OAAO,CAAC,IAAI,CAAC;IACbM,YAAY,CAACc,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAED,oBACE1B,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAEvB,IAAI;MAAEgB,KAAK;MAAEI,MAAM;MAAElB,aAAa;MAAEE,gBAAgB;MAAEO;IAAiB,CAAE;IAAAb,QAAA,EACrGA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC5B,EAAA,CAxCWF,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AA0CzB,OAAO,MAAMgC,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMxC,UAAU,CAACM,WAAW,CAAC;AAAA;AAACkC,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}