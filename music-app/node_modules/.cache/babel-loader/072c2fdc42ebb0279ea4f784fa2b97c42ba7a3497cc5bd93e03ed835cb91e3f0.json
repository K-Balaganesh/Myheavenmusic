{"ast":null,"code":"var _jsxFileName = \"D:\\\\5th sem\\\\React projects\\\\Reactcodegpt\\\\music-app\\\\src\\\\components\\\\SongCard.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from \"react\";\nimport \"./SongCard.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SongList() {\n  _s();\n  const [songs, setSongs] = useState([]);\n  // State to hold the song object for the fixed mini-player\n  const [activeSong, setActiveSong] = useState(null);\n  // Ref to hold the current audio element being played (for pause control)\n  const currentAudioRef = useRef(null);\n  useEffect(() => {\n    fetch(\"/songs.json\") // your JSON file in public folder\n    .then(res => res.json()).then(data => {\n      // Sort by id ascending\n      const sortedSongs = data.sort((a, b) => a.id - b.id);\n      setSongs(sortedSongs);\n    }).catch(err => console.error(\"Error fetching songs:\", err));\n  }, []);\n\n  // Function to handle song play/pause\n  const handlePlay = (song, audioEl) => {\n    // 1. Pause the previously playing audio element\n    if (currentAudioRef.current && currentAudioRef.current !== audioEl) {\n      currentAudioRef.current.pause();\n    }\n\n    // 2. Set the current audio element reference to the newly clicked one\n    currentAudioRef.current = audioEl;\n\n    // 3. Set the active song for the fixed mini-player\n    setActiveSong(song);\n  };\n\n  // Note: The audio controls in the cards will now manage play/pause directly,\n  // but they will trigger a state change to show the mini-player and handle pausing others.\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-list\",\n      children: songs.map(song =>\n      /*#__PURE__*/\n      // The click on the card will now set the activeSong for the footer player.\n      _jsxDEV(\"div\", {\n        className: \"song-card\",\n        onClick: () => setActiveSong(song) // You can click the card to load the song in the mini-player\n        ,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: song.cover,\n          alt: song.songname,\n          className: \"cover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: song.songname\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [song.moviename, \" | \", song.artist.split(',')[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          src: song.url,\n          onPlay: e => handlePlay(song, e.target)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)]\n      }, song.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), activeSong && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mini-player-footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"song-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: activeSong.cover,\n          alt: activeSong.songname,\n          className: \"mini-cover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mini-song-name\",\n            children: [activeSong.songname, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"mini-artist-name\",\n              children: \" - \" + activeSong.artist.split(',')[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mini-movie-name\",\n            children: activeSong.moviename\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-controls\",\n        children: /*#__PURE__*/_jsxDEV(\"audio\", {\n          // Key ensures the audio element re-renders when the song changes\n          controls: true,\n          autoPlay: true // Auto-play the new song in the mini-player\n          ,\n          src: activeSong.url,\n          ref: currentAudioRef // Ref to control the main audio source\n        }, activeSong.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(SongList, \"c+Jj63DSjCdXjI+9LDOJSj/Q8hg=\");\n_c = SongList;\nvar _c;\n$RefreshReg$(_c, \"SongList\");","map":{"version":3,"names":["useEffect","useState","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","SongList","_s","songs","setSongs","activeSong","setActiveSong","currentAudioRef","fetch","then","res","json","data","sortedSongs","sort","a","b","id","catch","err","console","error","handlePlay","song","audioEl","current","pause","children","className","map","onClick","src","cover","alt","songname","fileName","_jsxFileName","lineNumber","columnNumber","moviename","artist","split","controls","url","onPlay","e","target","autoPlay","ref","_c","$RefreshReg$"],"sources":["D:/5th sem/React projects/Reactcodegpt/music-app/src/components/SongCard.jsx"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\nimport \"./SongCard.css\";\r\n\r\nexport default function SongList() {\r\n  const [songs, setSongs] = useState([]);\r\n  // State to hold the song object for the fixed mini-player\r\n  const [activeSong, setActiveSong] = useState(null);\r\n  // Ref to hold the current audio element being played (for pause control)\r\n  const currentAudioRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/songs.json\") // your JSON file in public folder\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        // Sort by id ascending\r\n        const sortedSongs = data.sort((a, b) => a.id - b.id);\r\n        setSongs(sortedSongs);\r\n      })\r\n      .catch((err) => console.error(\"Error fetching songs:\", err));\r\n  }, []);\r\n\r\n  // Function to handle song play/pause\r\n  const handlePlay = (song, audioEl) => {\r\n    // 1. Pause the previously playing audio element\r\n    if (currentAudioRef.current && currentAudioRef.current !== audioEl) {\r\n      currentAudioRef.current.pause();\r\n    }\r\n\r\n    // 2. Set the current audio element reference to the newly clicked one\r\n    currentAudioRef.current = audioEl;\r\n\r\n    // 3. Set the active song for the fixed mini-player\r\n    setActiveSong(song);\r\n  };\r\n  \r\n  // Note: The audio controls in the cards will now manage play/pause directly,\r\n  // but they will trigger a state change to show the mini-player and handle pausing others.\r\n\r\n  return (\r\n    <>\r\n      <div className=\"song-list\">\r\n        {songs.map((song) => (\r\n          // The click on the card will now set the activeSong for the footer player.\r\n          <div \r\n            key={song.id} \r\n            className=\"song-card\"\r\n            onClick={() => setActiveSong(song)} // You can click the card to load the song in the mini-player\r\n          >\r\n            <img src={song.cover} alt={song.songname} className=\"cover\" />\r\n            <h4>{song.songname}</h4>\r\n            <p>{song.moviename} | {song.artist.split(',')[0]}</p>\r\n            {/* The individual player is now a bit of a duplicate, but serves as an instant player */}\r\n            <audio \r\n                controls \r\n                src={song.url} \r\n                onPlay={(e) => handlePlay(song, e.target)}\r\n            ></audio>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* --- Mini-Player Fixed Footer --- */}\r\n      {activeSong && (\r\n        <div className=\"mini-player-footer\">\r\n          <div className=\"song-info\">\r\n            <img \r\n              src={activeSong.cover} \r\n              alt={activeSong.songname} \r\n              className=\"mini-cover\" \r\n            />\r\n            <div>\r\n              <p className=\"mini-song-name\">\r\n                {activeSong.songname} \r\n                <span className=\"mini-artist-name\">\r\n                    {\" - \" + activeSong.artist.split(',')[0]}\r\n                </span>\r\n              </p>\r\n              <p className=\"mini-movie-name\">{activeSong.moviename}</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"player-controls\">\r\n            {/* Since we're using the standard HTML <audio> for simplicity, \r\n            we'll use a hidden one in the footer to control the sound. \r\n            For full Spotify-like controls (prev/next/custom pause button), \r\n            you'd need a more complex component and state.\r\n            */}\r\n            <audio \r\n              key={activeSong.id} // Key ensures the audio element re-renders when the song changes\r\n              controls \r\n              autoPlay // Auto-play the new song in the mini-player\r\n              src={activeSong.url}\r\n              ref={currentAudioRef} // Ref to control the main audio source\r\n            ></audio>\r\n            \r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}