{"ast":null,"code":"var _jsxFileName = \"D:\\\\5th sem\\\\React projects\\\\Reactcodegpt\\\\music-app\\\\src\\\\components\\\\SongCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport \"./SongCard.css\";\n// Import the context hook\nimport { useMusicPlayer } from '../context/MusicPlayerContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SongCard() {\n  _s();\n  // Use the context hook to access global player state and functions.\n  const {\n    songs,\n    activeSong,\n    isPlaying,\n    playSong,\n    setSongs\n  } = useMusicPlayer();\n\n  // --- Data Fetching ---\n  // This useEffect runs once to fetch data and populate the global 'songs' state via setSongs.\n  useEffect(() => {\n    // Ensure this path '/songs.json' is correct for your project\n    fetch(\"/songs.json\").then(res => res.json()).then(data => {\n      const sortedSongs = data.sort((a, b) => a.id - b.id);\n      // Call setSongs from the context to update the global song list\n      setSongs(sortedSongs);\n    }).catch(err => console.error(\"Error fetching songs:\", err));\n  }, [setSongs]); // setSongs is included in the dependency array as good practice.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"song-list\",\n    children: songs.map(song => /*#__PURE__*/_jsxDEV(\"div\", {\n      // The class name uses global state (activeSong, isPlaying) for visual feedback\n      className: `song-card ${(activeSong === null || activeSong === void 0 ? void 0 : activeSong.id) === song.id && isPlaying ? 'is-playing' : ''}`\n      // Clicking the card calls the global playSong function\n      ,\n      onClick: () => playSong(song),\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: song.cover,\n        alt: song.songname,\n        className: \"cover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: song.songname\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: song.artist.split(',')[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this)]\n    }, song.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n_s(SongCard, \"8C5+zhQfIqHHDmNUtxJmAdaAojQ=\", false, function () {\n  return [useMusicPlayer];\n});\n_c = SongCard;\nvar _c;\n$RefreshReg$(_c, \"SongCard\");","map":{"version":3,"names":["React","useEffect","useMusicPlayer","jsxDEV","_jsxDEV","SongCard","_s","songs","activeSong","isPlaying","playSong","setSongs","fetch","then","res","json","data","sortedSongs","sort","a","b","id","catch","err","console","error","className","children","map","song","onClick","src","cover","alt","songname","fileName","_jsxFileName","lineNumber","columnNumber","artist","split","_c","$RefreshReg$"],"sources":["D:/5th sem/React projects/Reactcodegpt/music-app/src/components/SongCard.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport \"./SongCard.css\";\r\n// Import the context hook\r\nimport { useMusicPlayer } from '../context/MusicPlayerContext'; \r\n\r\nexport default function SongCard() {\r\n    // Use the context hook to access global player state and functions.\r\n    const { songs, activeSong, isPlaying, playSong, setSongs } = useMusicPlayer();\r\n    \r\n    // --- Data Fetching ---\r\n    // This useEffect runs once to fetch data and populate the global 'songs' state via setSongs.\r\n    useEffect(() => {\r\n        // Ensure this path '/songs.json' is correct for your project\r\n        fetch(\"/songs.json\")\r\n          .then((res) => res.json())\r\n          .then((data) => {\r\n            const sortedSongs = data.sort((a, b) => a.id - b.id);\r\n            // Call setSongs from the context to update the global song list\r\n            setSongs(sortedSongs); \r\n          })\r\n          .catch((err) => console.error(\"Error fetching songs:\", err));\r\n    }, [setSongs]); // setSongs is included in the dependency array as good practice.\r\n\r\n    return (\r\n        <div className=\"song-list\">\r\n            {songs.map((song) => (\r\n                <div \r\n                    key={song.id} \r\n                    // The class name uses global state (activeSong, isPlaying) for visual feedback\r\n                    className={`song-card ${activeSong?.id === song.id && isPlaying ? 'is-playing' : ''}`}\r\n                    // Clicking the card calls the global playSong function\r\n                    onClick={() => playSong(song)}\r\n                >\r\n                    <img src={song.cover} alt={song.songname} className=\"cover\" />\r\n                    <h4>{song.songname}</h4>\r\n                    {/* Assuming artist is a comma-separated string, displaying the first one */}\r\n                    <p>{song.artist.split(',')[0]}</p> \r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,gBAAgB;AACvB;AACA,SAASC,cAAc,QAAQ,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAC/B;EACA,MAAM;IAAEC,KAAK;IAAEC,UAAU;IAAEC,SAAS;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGT,cAAc,CAAC,CAAC;;EAE7E;EACA;EACAD,SAAS,CAAC,MAAM;IACZ;IACAW,KAAK,CAAC,aAAa,CAAC,CACjBC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACd,MAAMC,WAAW,GAAGD,IAAI,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,CAAC;MACpD;MACAV,QAAQ,CAACM,WAAW,CAAC;IACvB,CAAC,CAAC,CACDK,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC,CAAC;EAClE,CAAC,EAAE,CAACZ,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,oBACIP,OAAA;IAAKsB,SAAS,EAAC,WAAW;IAAAC,QAAA,EACrBpB,KAAK,CAACqB,GAAG,CAAEC,IAAI,iBACZzB,OAAA;MAEI;MACAsB,SAAS,EAAE,aAAa,CAAAlB,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEa,EAAE,MAAKQ,IAAI,CAACR,EAAE,IAAIZ,SAAS,GAAG,YAAY,GAAG,EAAE;MACnF;MAAA;MACAqB,OAAO,EAAEA,CAAA,KAAMpB,QAAQ,CAACmB,IAAI,CAAE;MAAAF,QAAA,gBAE9BvB,OAAA;QAAK2B,GAAG,EAAEF,IAAI,CAACG,KAAM;QAACC,GAAG,EAAEJ,IAAI,CAACK,QAAS;QAACR,SAAS,EAAC;MAAO;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC9DlC,OAAA;QAAAuB,QAAA,EAAKE,IAAI,CAACK;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAExBlC,OAAA;QAAAuB,QAAA,EAAIE,IAAI,CAACU,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;MAAC;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAT7BT,IAAI,CAACR,EAAE;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAUX,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAAChC,EAAA,CApCuBD,QAAQ;EAAA,QAEiCH,cAAc;AAAA;AAAAuC,EAAA,GAFvDpC,QAAQ;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}