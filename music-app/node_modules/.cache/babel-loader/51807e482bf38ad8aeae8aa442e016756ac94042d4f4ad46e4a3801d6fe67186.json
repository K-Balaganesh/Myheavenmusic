{"ast":null,"code":"var _jsxFileName = \"D:\\\\5th sem\\\\React projects\\\\Reactcodegpt\\\\music-app\\\\src\\\\components\\\\SongCard.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SongCard({\n  song,\n  onAddToPlaylist\n}) {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const audioRef = useRef(null);\n  const togglePlay = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n    } else {\n      audioRef.current.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"song-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: song.cover,\n      alt: song.title,\n      style: {\n        width: \"100%\",\n        borderRadius: \"10px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: song.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [song.artist, \" | \", song.language, \" | \", song.duration]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: song.url\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"0.5rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: togglePlay,\n        children: isPlaying ? \"Pause\" : \"Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          marginLeft: \"0.5rem\"\n        },\n        onClick: () => onAddToPlaylist(song),\n        children: \"Add to Playlist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n_s(SongCard, \"sL4xjVLmTF7f1+jWdlUm6K/Qvq0=\");\n_c = SongCard;\nvar _c;\n$RefreshReg$(_c, \"SongCard\");","map":{"version":3,"names":["useState","useRef","jsxDEV","_jsxDEV","SongCard","song","onAddToPlaylist","_s","isPlaying","setIsPlaying","audioRef","togglePlay","current","pause","play","className","children","src","cover","alt","title","style","width","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","artist","language","duration","ref","url","marginTop","onClick","marginLeft","_c","$RefreshReg$"],"sources":["D:/5th sem/React projects/Reactcodegpt/music-app/src/components/SongCard.jsx"],"sourcesContent":["import { useState, useRef } from \"react\";\r\n\r\nexport default function SongCard({ song, onAddToPlaylist }) {\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const audioRef = useRef(null);\r\n\r\n  const togglePlay = () => {\r\n    if (isPlaying) {\r\n      audioRef.current.pause();\r\n    } else {\r\n      audioRef.current.play();\r\n    }\r\n    setIsPlaying(!isPlaying);\r\n  };\r\n\r\n  return (\r\n    <div className=\"song-card\">\r\n      <img src={song.cover} alt={song.title} style={{ width: \"100%\", borderRadius: \"10px\" }} />\r\n      <h3>{song.title}</h3>\r\n      <p>{song.artist} | {song.language} | {song.duration}</p>\r\n      <audio ref={audioRef} src={song.url} />\r\n      <div style={{ marginTop: \"0.5rem\" }}>\r\n        <button onClick={togglePlay}>{isPlaying ? \"Pause\" : \"Play\"}</button>\r\n        <button style={{ marginLeft: \"0.5rem\" }} onClick={() => onAddToPlaylist(song)}>\r\n          Add to Playlist\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,eAAe,SAASC,QAAQA,CAAC;EAAEC,IAAI;EAAEC;AAAgB,CAAC,EAAE;EAAAC,EAAA;EAC1D,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMU,QAAQ,GAAGT,MAAM,CAAC,IAAI,CAAC;EAE7B,MAAMU,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIH,SAAS,EAAE;MACbE,QAAQ,CAACE,OAAO,CAACC,KAAK,CAAC,CAAC;IAC1B,CAAC,MAAM;MACLH,QAAQ,CAACE,OAAO,CAACE,IAAI,CAAC,CAAC;IACzB;IACAL,YAAY,CAAC,CAACD,SAAS,CAAC;EAC1B,CAAC;EAED,oBACEL,OAAA;IAAKY,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBb,OAAA;MAAKc,GAAG,EAAEZ,IAAI,CAACa,KAAM;MAACC,GAAG,EAAEd,IAAI,CAACe,KAAM;MAACC,KAAK,EAAE;QAAEC,KAAK,EAAE,MAAM;QAAEC,YAAY,EAAE;MAAO;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACzFxB,OAAA;MAAAa,QAAA,EAAKX,IAAI,CAACe;IAAK;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrBxB,OAAA;MAAAa,QAAA,GAAIX,IAAI,CAACuB,MAAM,EAAC,KAAG,EAACvB,IAAI,CAACwB,QAAQ,EAAC,KAAG,EAACxB,IAAI,CAACyB,QAAQ;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxDxB,OAAA;MAAO4B,GAAG,EAAErB,QAAS;MAACO,GAAG,EAAEZ,IAAI,CAAC2B;IAAI;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvCxB,OAAA;MAAKkB,KAAK,EAAE;QAAEY,SAAS,EAAE;MAAS,CAAE;MAAAjB,QAAA,gBAClCb,OAAA;QAAQ+B,OAAO,EAAEvB,UAAW;QAAAK,QAAA,EAAER,SAAS,GAAG,OAAO,GAAG;MAAM;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC,eACpExB,OAAA;QAAQkB,KAAK,EAAE;UAAEc,UAAU,EAAE;QAAS,CAAE;QAACD,OAAO,EAAEA,CAAA,KAAM5B,eAAe,CAACD,IAAI,CAAE;QAAAW,QAAA,EAAC;MAE/E;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACpB,EAAA,CA3BuBH,QAAQ;AAAAgC,EAAA,GAARhC,QAAQ;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}