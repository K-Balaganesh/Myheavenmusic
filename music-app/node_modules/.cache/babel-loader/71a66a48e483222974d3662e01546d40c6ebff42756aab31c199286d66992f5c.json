{"ast":null,"code":"var _jsxFileName = \"D:\\\\5th sem\\\\React projects\\\\Reactcodegpt\\\\music-app\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect, useCallback } from \"react\";\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, onAuthStateChanged, signInWithCustomToken, signInAnonymously, signOut, setPersistence, browserLocalPersistence } from 'firebase/auth';\nimport { getFirestore, setLogLevel } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // Back to named export\n  // --- Global Variable Access ---\n  const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;\n  const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\n  const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\n\n  // --- Firebase State ---\n  const [auth, setAuth] = useState(null);\n  const [db, setDb] = useState(null);\n\n  // --- User State ---\n  const [user, setUser] = useState(null); // Firebase User object (null or User)\n  const [userId, setUserId] = useState(null); // The final resolved UID or random ID\n  const [isAuthReady, setIsAuthReady] = useState(false); // True after initial auth check\n\n  // --- Pop-up State (from original code) ---\n  const [showAuthPopup, setShowAuthPopup] = useState(false);\n  const [authPopupMessage, setAuthPopupMessage] = useState(\"\");\n\n  // Function to display the pop-up\n  const triggerAuthPopup = useCallback(message => {\n    setAuthPopupMessage(message);\n    setShowAuthPopup(true);\n    const timer = setTimeout(() => {\n      setShowAuthPopup(false);\n      setAuthPopupMessage(\"\");\n    }, 2500); // Popup shown for 2.5 seconds\n    return () => clearTimeout(timer);\n  }, []);\n\n  // --- Firebase Initialization and Authentication Listener ---\n  useEffect(() => {\n    if (!firebaseConfig) {\n      console.error(\"FATAL: Firebase configuration (__firebase_config) not available.\");\n      setIsAuthReady(true);\n      return;\n    }\n\n    // Initialize Firebase services\n    const firebaseApp = initializeApp(firebaseConfig);\n    const firebaseAuth = getAuth(firebaseApp);\n    const firestoreDb = getFirestore(firebaseApp);\n\n    // Set Firebase Log Level for debugging (Mandatory per instructions)\n    setLogLevel('Debug');\n    setAuth(firebaseAuth);\n    setDb(firestoreDb);\n\n    // Set persistence to local storage (optional but good practice)\n    setPersistence(firebaseAuth, browserLocalPersistence);\n\n    // 1. Initial Authentication Logic (Using token or Anonymous sign-in)\n    const authenticateUser = async () => {\n      try {\n        if (initialAuthToken) {\n          await signInWithCustomToken(firebaseAuth, initialAuthToken);\n        } else {\n          // Sign in anonymously if custom token is not provided\n          await signInAnonymously(firebaseAuth);\n        }\n      } catch (error) {\n        console.error(\"Firebase initial authentication failed:\", error);\n        // In case of error (e.g., token expired), attempt anonymous sign-in as a fallback\n        try {\n          await signInAnonymously(firebaseAuth);\n        } catch (e) {\n          console.error(\"Anonymous sign-in fallback failed:\", e);\n        }\n      }\n    };\n    authenticateUser();\n\n    // 2. Auth State Listener (Reacts to all sign-in/out events)\n    const unsubscribe = onAuthStateChanged(firebaseAuth, currentUser => {\n      // Update the user object\n      setUser(currentUser);\n\n      // Determine the consistent ID (UID for authenticated, random if anonymous/unauthenticated)\n      const resolvedUserId = (currentUser === null || currentUser === void 0 ? void 0 : currentUser.uid) || crypto.randomUUID();\n      setUserId(resolvedUserId);\n\n      // Signal that the authentication check is complete\n      setIsAuthReady(true);\n      console.log(\"Auth state changed. User ID:\", resolvedUserId);\n    });\n\n    // Cleanup the listener on unmount\n    return () => unsubscribe();\n  }, [firebaseConfig, initialAuthToken]); // Reruns only if config/token changes\n\n  // --- Auth Functions (Now using Firebase methods, removed localStorage) ---\n\n  // The login function is now primarily instructional, as external sign-in methods\n  // (like signInWithEmailAndPassword) automatically update the state via onAuthStateChanged.\n  const login = userData => {\n    console.warn(\"AuthContext: 'login' should use Firebase Auth methods (e.g., signInWithEmailAndPassword, Google Sign-in) to update the state via onAuthStateChanged.\");\n  };\n  const logout = async () => {\n    if (auth) {\n      try {\n        await signOut(auth);\n        triggerAuthPopup(\"Successfully logged out.\");\n      } catch (error) {\n        console.error(\"Firebase sign out failed:\", error);\n        triggerAuthPopup(\"Logout failed: \" + error.message);\n      }\n    }\n  };\n  const contextValue = {\n    // Firebase Instances\n    auth,\n    db,\n    // Authentication Status\n    user,\n    // Firebase User object (contains details like email, display name, uid)\n    userId,\n    // The resolved UID or random ID (Use this for Firestore paths)\n    appId,\n    // The mandatory Canvas app ID for Firestore paths\n    isAuthReady,\n    isAuthenticated: !!user && !user.isAnonymous,\n    // True for fully logged-in users\n\n    // Auth Actions\n    login,\n    logout,\n    // Pop-up Notification\n    showAuthPopup,\n    authPopupMessage,\n    triggerAuthPopup\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"bT91gtCIzeu6E9jAfHj8tsOP09I=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useCallback","initializeApp","getAuth","onAuthStateChanged","signInWithCustomToken","signInAnonymously","signOut","setPersistence","browserLocalPersistence","getFirestore","setLogLevel","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","firebaseConfig","__firebase_config","JSON","parse","initialAuthToken","__initial_auth_token","appId","__app_id","auth","setAuth","db","setDb","user","setUser","userId","setUserId","isAuthReady","setIsAuthReady","showAuthPopup","setShowAuthPopup","authPopupMessage","setAuthPopupMessage","triggerAuthPopup","message","timer","setTimeout","clearTimeout","console","error","firebaseApp","firebaseAuth","firestoreDb","authenticateUser","e","unsubscribe","currentUser","resolvedUserId","uid","crypto","randomUUID","log","login","userData","warn","logout","contextValue","isAuthenticated","isAnonymous","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["D:/5th sem/React projects/Reactcodegpt/music-app/src/context/AuthContext.jsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect, useCallback } from \"react\";\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth, onAuthStateChanged, signInWithCustomToken, signInAnonymously, signOut, setPersistence, browserLocalPersistence } from 'firebase/auth';\r\nimport { getFirestore, setLogLevel } from 'firebase/firestore';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => { // Back to named export\r\n    // --- Global Variable Access ---\r\n    const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;\r\n    const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\r\n    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';\r\n\r\n    // --- Firebase State ---\r\n    const [auth, setAuth] = useState(null);\r\n    const [db, setDb] = useState(null);\r\n\r\n    // --- User State ---\r\n    const [user, setUser] = useState(null); // Firebase User object (null or User)\r\n    const [userId, setUserId] = useState(null); // The final resolved UID or random ID\r\n    const [isAuthReady, setIsAuthReady] = useState(false); // True after initial auth check\r\n\r\n    // --- Pop-up State (from original code) ---\r\n    const [showAuthPopup, setShowAuthPopup] = useState(false);\r\n    const [authPopupMessage, setAuthPopupMessage] = useState(\"\");\r\n\r\n    // Function to display the pop-up\r\n    const triggerAuthPopup = useCallback((message) => {\r\n        setAuthPopupMessage(message);\r\n        setShowAuthPopup(true);\r\n        const timer = setTimeout(() => {\r\n            setShowAuthPopup(false);\r\n            setAuthPopupMessage(\"\");\r\n        }, 2500); // Popup shown for 2.5 seconds\r\n        return () => clearTimeout(timer);\r\n    }, []);\r\n\r\n    // --- Firebase Initialization and Authentication Listener ---\r\n    useEffect(() => {\r\n        if (!firebaseConfig) {\r\n            console.error(\"FATAL: Firebase configuration (__firebase_config) not available.\");\r\n            setIsAuthReady(true);\r\n            return;\r\n        }\r\n\r\n        // Initialize Firebase services\r\n        const firebaseApp = initializeApp(firebaseConfig);\r\n        const firebaseAuth = getAuth(firebaseApp);\r\n        const firestoreDb = getFirestore(firebaseApp);\r\n        \r\n        // Set Firebase Log Level for debugging (Mandatory per instructions)\r\n        setLogLevel('Debug');\r\n\r\n        setAuth(firebaseAuth);\r\n        setDb(firestoreDb);\r\n\r\n        // Set persistence to local storage (optional but good practice)\r\n        setPersistence(firebaseAuth, browserLocalPersistence);\r\n\r\n\r\n        // 1. Initial Authentication Logic (Using token or Anonymous sign-in)\r\n        const authenticateUser = async () => {\r\n            try {\r\n                if (initialAuthToken) {\r\n                    await signInWithCustomToken(firebaseAuth, initialAuthToken);\r\n                } else {\r\n                    // Sign in anonymously if custom token is not provided\r\n                    await signInAnonymously(firebaseAuth);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Firebase initial authentication failed:\", error);\r\n                // In case of error (e.g., token expired), attempt anonymous sign-in as a fallback\r\n                try {\r\n                    await signInAnonymously(firebaseAuth);\r\n                } catch (e) {\r\n                    console.error(\"Anonymous sign-in fallback failed:\", e);\r\n                }\r\n            }\r\n        };\r\n\r\n        authenticateUser();\r\n\r\n        // 2. Auth State Listener (Reacts to all sign-in/out events)\r\n        const unsubscribe = onAuthStateChanged(firebaseAuth, (currentUser) => {\r\n            // Update the user object\r\n            setUser(currentUser);\r\n            \r\n            // Determine the consistent ID (UID for authenticated, random if anonymous/unauthenticated)\r\n            const resolvedUserId = currentUser?.uid || crypto.randomUUID();\r\n            setUserId(resolvedUserId);\r\n\r\n            // Signal that the authentication check is complete\r\n            setIsAuthReady(true);\r\n            console.log(\"Auth state changed. User ID:\", resolvedUserId);\r\n        });\r\n\r\n        // Cleanup the listener on unmount\r\n        return () => unsubscribe();\r\n    }, [firebaseConfig, initialAuthToken]); // Reruns only if config/token changes\r\n\r\n    // --- Auth Functions (Now using Firebase methods, removed localStorage) ---\r\n\r\n    // The login function is now primarily instructional, as external sign-in methods\r\n    // (like signInWithEmailAndPassword) automatically update the state via onAuthStateChanged.\r\n    const login = (userData) => {\r\n        console.warn(\"AuthContext: 'login' should use Firebase Auth methods (e.g., signInWithEmailAndPassword, Google Sign-in) to update the state via onAuthStateChanged.\");\r\n    };\r\n\r\n    const logout = async () => {\r\n        if (auth) {\r\n            try {\r\n                await signOut(auth);\r\n                triggerAuthPopup(\"Successfully logged out.\");\r\n            } catch (error) {\r\n                console.error(\"Firebase sign out failed:\", error);\r\n                triggerAuthPopup(\"Logout failed: \" + error.message);\r\n            }\r\n        }\r\n    };\r\n\r\n    const contextValue = {\r\n        // Firebase Instances\r\n        auth,\r\n        db,\r\n\r\n        // Authentication Status\r\n        user, // Firebase User object (contains details like email, display name, uid)\r\n        userId, // The resolved UID or random ID (Use this for Firestore paths)\r\n        appId, // The mandatory Canvas app ID for Firestore paths\r\n        isAuthReady,\r\n        isAuthenticated: !!user && !user.isAnonymous, // True for fully logged-in users\r\n\r\n        // Auth Actions\r\n        login,\r\n        logout,\r\n\r\n        // Pop-up Notification\r\n        showAuthPopup,\r\n        authPopupMessage,\r\n        triggerAuthPopup,\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={contextValue}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}